{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownToggle } from '@restart/ui/DropdownToggle';\nimport DropdownContext from '@restart/ui/DropdownContext';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport Button from './Button';\nimport InputGroupContext from './InputGroupContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownToggle = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  split,\n  className,\n  childBsPrefix,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = Button,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-toggle');\n  const dropdownContext = useContext(DropdownContext);\n  const isInputGroup = useContext(InputGroupContext);\n\n  if (childBsPrefix !== undefined) {\n    props.bsPrefix = childBsPrefix;\n  }\n\n  const [toggleProps] = useDropdownToggle();\n  toggleProps.ref = useMergedRefs(toggleProps.ref, useWrappedRefWithWarning(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the\n  // underlying component, to allow it to render size and style variants.\n\n  return /*#__PURE__*/_jsx(Component, {\n    className: classNames(className, prefix, split && `${prefix}-split`, !!isInputGroup && (dropdownContext == null ? void 0 : dropdownContext.show) && 'show'),\n    ...toggleProps,\n    ...props\n  });\n});\nDropdownToggle.displayName = 'DropdownToggle';\nexport default DropdownToggle;","map":{"version":3,"sources":["/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/node_modules/react-bootstrap/esm/DropdownToggle.js"],"names":["classNames","React","useContext","useDropdownToggle","DropdownContext","useMergedRefs","Button","InputGroupContext","useBootstrapPrefix","useWrappedRefWithWarning","jsx","_jsx","DropdownToggle","forwardRef","bsPrefix","split","className","childBsPrefix","as","Component","props","ref","prefix","dropdownContext","isInputGroup","undefined","toggleProps","show","displayName"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,cAAc,GAAG,aAAaX,KAAK,CAACY,UAAN,CAAiB,CAAC;AACpDC,EAAAA,QADoD;AAEpDC,EAAAA,KAFoD;AAGpDC,EAAAA,SAHoD;AAIpDC,EAAAA,aAJoD;AAKpD;AACAC,EAAAA,EAAE,EAAEC,SAAS,GAAGb,MANoC;AAOpD,KAAGc;AAPiD,CAAD,EAQlDC,GARkD,KAQ1C;AACT,QAAMC,MAAM,GAAGd,kBAAkB,CAACM,QAAD,EAAW,iBAAX,CAAjC;AACA,QAAMS,eAAe,GAAGrB,UAAU,CAACE,eAAD,CAAlC;AACA,QAAMoB,YAAY,GAAGtB,UAAU,CAACK,iBAAD,CAA/B;;AAEA,MAAIU,aAAa,KAAKQ,SAAtB,EAAiC;AAC/BL,IAAAA,KAAK,CAACN,QAAN,GAAiBG,aAAjB;AACD;;AAED,QAAM,CAACS,WAAD,IAAgBvB,iBAAiB,EAAvC;AACAuB,EAAAA,WAAW,CAACL,GAAZ,GAAkBhB,aAAa,CAACqB,WAAW,CAACL,GAAb,EAAkBZ,wBAAwB,CAACY,GAAD,EAAM,gBAAN,CAA1C,CAA/B,CAVS,CAU0F;AACnG;;AAEA,SAAO,aAAaV,IAAI,CAACQ,SAAD,EAAY;AAClCH,IAAAA,SAAS,EAAEhB,UAAU,CAACgB,SAAD,EAAYM,MAAZ,EAAoBP,KAAK,IAAK,GAAEO,MAAO,QAAvC,EAAgD,CAAC,CAACE,YAAF,KAAmBD,eAAe,IAAI,IAAnB,GAA0B,KAAK,CAA/B,GAAmCA,eAAe,CAACI,IAAtE,KAA+E,MAA/H,CADa;AAElC,OAAGD,WAF+B;AAGlC,OAAGN;AAH+B,GAAZ,CAAxB;AAKD,CA1BmC,CAApC;AA2BAR,cAAc,CAACgB,WAAf,GAA6B,gBAA7B;AACA,eAAehB,cAAf","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useDropdownToggle } from '@restart/ui/DropdownToggle';\nimport DropdownContext from '@restart/ui/DropdownContext';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport Button from './Button';\nimport InputGroupContext from './InputGroupContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport useWrappedRefWithWarning from './useWrappedRefWithWarning';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DropdownToggle = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  split,\n  className,\n  childBsPrefix,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = Button,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'dropdown-toggle');\n  const dropdownContext = useContext(DropdownContext);\n  const isInputGroup = useContext(InputGroupContext);\n\n  if (childBsPrefix !== undefined) {\n    props.bsPrefix = childBsPrefix;\n  }\n\n  const [toggleProps] = useDropdownToggle();\n  toggleProps.ref = useMergedRefs(toggleProps.ref, useWrappedRefWithWarning(ref, 'DropdownToggle')); // This intentionally forwards size and variant (if set) to the\n  // underlying component, to allow it to render size and style variants.\n\n  return /*#__PURE__*/_jsx(Component, {\n    className: classNames(className, prefix, split && `${prefix}-split`, !!isInputGroup && (dropdownContext == null ? void 0 : dropdownContext.show) && 'show'),\n    ...toggleProps,\n    ...props\n  });\n});\nDropdownToggle.displayName = 'DropdownToggle';\nexport default DropdownToggle;"]},"metadata":{},"sourceType":"module"}
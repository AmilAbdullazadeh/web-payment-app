{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport { useUncontrolled } from 'uncontrollable';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarToggle from './NavbarToggle';\nimport NavbarOffcanvas from './NavbarOffcanvas';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarText = createWithBsPrefix('navbar-text', {\n  Component: 'span'\n});\nconst defaultProps = {\n  expand: true,\n  variant: 'light',\n  collapseOnSelect: false\n};\nconst Navbar = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    bsPrefix: initialBsPrefix,\n    expand,\n    variant,\n    bg,\n    fixed,\n    sticky,\n    className,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'nav',\n    expanded,\n    onToggle,\n    onSelect,\n    collapseOnSelect,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    expanded: 'onToggle'\n  });\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'navbar');\n  const handleCollapse = useCallback((...args) => {\n    onSelect == null ? void 0 : onSelect(...args);\n\n    if (collapseOnSelect && expanded) {\n      onToggle == null ? void 0 : onToggle(false);\n    }\n  }, [onSelect, collapseOnSelect, expanded, onToggle]); // will result in some false positives but that seems better\n  // than false negatives. strict `undefined` check allows explicit\n  // \"nulling\" of the role if the user really doesn't want one\n\n  if (controlledProps.role === undefined && Component !== 'nav') {\n    controlledProps.role = 'navigation';\n  }\n\n  let expandClass = `${bsPrefix}-expand`;\n  if (typeof expand === 'string') expandClass = `${expandClass}-${expand}`;\n  const navbarContext = useMemo(() => ({\n    onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),\n    bsPrefix,\n    expanded: !!expanded\n  }), [bsPrefix, expanded, onToggle]);\n  return /*#__PURE__*/_jsx(NavbarContext.Provider, {\n    value: navbarContext,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: handleCollapse,\n      children: /*#__PURE__*/_jsx(Component, {\n        ref: ref,\n        ...controlledProps,\n        className: classNames(className, bsPrefix, expand && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)\n      })\n    })\n  });\n});\nNavbar.defaultProps = defaultProps;\nNavbar.displayName = 'Navbar';\nexport default Object.assign(Navbar, {\n  Brand: NavbarBrand,\n  Collapse: NavbarCollapse,\n  Offcanvas: NavbarOffcanvas,\n  Text: NavbarText,\n  Toggle: NavbarToggle\n});","map":{"version":3,"sources":["/Users/amilabdullayev/Desktop/Projects/web-payment-app/node_modules/react-bootstrap/esm/Navbar.js"],"names":["classNames","React","useCallback","useMemo","SelectableContext","useUncontrolled","createWithBsPrefix","NavbarBrand","NavbarCollapse","NavbarToggle","NavbarOffcanvas","useBootstrapPrefix","NavbarContext","jsx","_jsx","NavbarText","Component","defaultProps","expand","variant","collapseOnSelect","Navbar","forwardRef","props","ref","bsPrefix","initialBsPrefix","bg","fixed","sticky","className","as","expanded","onToggle","onSelect","controlledProps","handleCollapse","args","role","undefined","expandClass","navbarContext","Provider","value","children","displayName","Object","assign","Brand","Collapse","Offcanvas","Text","Toggle"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,UAAU,GAAGT,kBAAkB,CAAC,aAAD,EAAgB;AACnDU,EAAAA,SAAS,EAAE;AADwC,CAAhB,CAArC;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,IADW;AAEnBC,EAAAA,OAAO,EAAE,OAFU;AAGnBC,EAAAA,gBAAgB,EAAE;AAHC,CAArB;AAKA,MAAMC,MAAM,GAAG,aAAapB,KAAK,CAACqB,UAAN,CAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC3D,QAAM;AACJC,IAAAA,QAAQ,EAAEC,eADN;AAEJR,IAAAA,MAFI;AAGJC,IAAAA,OAHI;AAIJQ,IAAAA,EAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,MANI;AAOJC,IAAAA,SAPI;AAQJ;AACAC,IAAAA,EAAE,EAAEf,SAAS,GAAG,KATZ;AAUJgB,IAAAA,QAVI;AAWJC,IAAAA,QAXI;AAYJC,IAAAA,QAZI;AAaJd,IAAAA,gBAbI;AAcJ,OAAGe;AAdC,MAeF9B,eAAe,CAACkB,KAAD,EAAQ;AACzBS,IAAAA,QAAQ,EAAE;AADe,GAAR,CAfnB;AAkBA,QAAMP,QAAQ,GAAGd,kBAAkB,CAACe,eAAD,EAAkB,QAAlB,CAAnC;AACA,QAAMU,cAAc,GAAGlC,WAAW,CAAC,CAAC,GAAGmC,IAAJ,KAAa;AAC9CH,IAAAA,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAAC,GAAGG,IAAJ,CAApC;;AAEA,QAAIjB,gBAAgB,IAAIY,QAAxB,EAAkC;AAChCC,MAAAA,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAAC,KAAD,CAApC;AACD;AACF,GANiC,EAM/B,CAACC,QAAD,EAAWd,gBAAX,EAA6BY,QAA7B,EAAuCC,QAAvC,CAN+B,CAAlC,CApB2D,CA0BL;AACtD;AACA;;AAEA,MAAIE,eAAe,CAACG,IAAhB,KAAyBC,SAAzB,IAAsCvB,SAAS,KAAK,KAAxD,EAA+D;AAC7DmB,IAAAA,eAAe,CAACG,IAAhB,GAAuB,YAAvB;AACD;;AAED,MAAIE,WAAW,GAAI,GAAEf,QAAS,SAA9B;AACA,MAAI,OAAOP,MAAP,KAAkB,QAAtB,EAAgCsB,WAAW,GAAI,GAAEA,WAAY,IAAGtB,MAAO,EAAvC;AAChC,QAAMuB,aAAa,GAAGtC,OAAO,CAAC,OAAO;AACnC8B,IAAAA,QAAQ,EAAE,MAAMA,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAAC,CAACD,QAAF,CADjB;AAEnCP,IAAAA,QAFmC;AAGnCO,IAAAA,QAAQ,EAAE,CAAC,CAACA;AAHuB,GAAP,CAAD,EAIzB,CAACP,QAAD,EAAWO,QAAX,EAAqBC,QAArB,CAJyB,CAA7B;AAKA,SAAO,aAAanB,IAAI,CAACF,aAAa,CAAC8B,QAAf,EAAyB;AAC/CC,IAAAA,KAAK,EAAEF,aADwC;AAE/CG,IAAAA,QAAQ,EAAE,aAAa9B,IAAI,CAACV,iBAAiB,CAACsC,QAAnB,EAA6B;AACtDC,MAAAA,KAAK,EAAEP,cAD+C;AAEtDQ,MAAAA,QAAQ,EAAE,aAAa9B,IAAI,CAACE,SAAD,EAAY;AACrCQ,QAAAA,GAAG,EAAEA,GADgC;AAErC,WAAGW,eAFkC;AAGrCL,QAAAA,SAAS,EAAE9B,UAAU,CAAC8B,SAAD,EAAYL,QAAZ,EAAsBP,MAAM,IAAIsB,WAAhC,EAA6CrB,OAAO,IAAK,GAAEM,QAAS,IAAGN,OAAQ,EAA/E,EAAkFQ,EAAE,IAAK,MAAKA,EAAG,EAAjG,EAAoGE,MAAM,IAAK,UAASA,MAAO,EAA/H,EAAkID,KAAK,IAAK,SAAQA,KAAM,EAA1J;AAHgB,OAAZ;AAF2B,KAA7B;AAFoB,GAAzB,CAAxB;AAWD,CApD2B,CAA5B;AAqDAP,MAAM,CAACJ,YAAP,GAAsBA,YAAtB;AACAI,MAAM,CAACwB,WAAP,GAAqB,QAArB;AACA,eAAeC,MAAM,CAACC,MAAP,CAAc1B,MAAd,EAAsB;AACnC2B,EAAAA,KAAK,EAAEzC,WAD4B;AAEnC0C,EAAAA,QAAQ,EAAEzC,cAFyB;AAGnC0C,EAAAA,SAAS,EAAExC,eAHwB;AAInCyC,EAAAA,IAAI,EAAEpC,UAJ6B;AAKnCqC,EAAAA,MAAM,EAAE3C;AAL2B,CAAtB,CAAf","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback, useMemo } from 'react';\nimport SelectableContext from '@restart/ui/SelectableContext';\nimport { useUncontrolled } from 'uncontrollable';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarToggle from './NavbarToggle';\nimport NavbarOffcanvas from './NavbarOffcanvas';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport NavbarContext from './NavbarContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NavbarText = createWithBsPrefix('navbar-text', {\n  Component: 'span'\n});\nconst defaultProps = {\n  expand: true,\n  variant: 'light',\n  collapseOnSelect: false\n};\nconst Navbar = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    bsPrefix: initialBsPrefix,\n    expand,\n    variant,\n    bg,\n    fixed,\n    sticky,\n    className,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'nav',\n    expanded,\n    onToggle,\n    onSelect,\n    collapseOnSelect,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    expanded: 'onToggle'\n  });\n  const bsPrefix = useBootstrapPrefix(initialBsPrefix, 'navbar');\n  const handleCollapse = useCallback((...args) => {\n    onSelect == null ? void 0 : onSelect(...args);\n\n    if (collapseOnSelect && expanded) {\n      onToggle == null ? void 0 : onToggle(false);\n    }\n  }, [onSelect, collapseOnSelect, expanded, onToggle]); // will result in some false positives but that seems better\n  // than false negatives. strict `undefined` check allows explicit\n  // \"nulling\" of the role if the user really doesn't want one\n\n  if (controlledProps.role === undefined && Component !== 'nav') {\n    controlledProps.role = 'navigation';\n  }\n\n  let expandClass = `${bsPrefix}-expand`;\n  if (typeof expand === 'string') expandClass = `${expandClass}-${expand}`;\n  const navbarContext = useMemo(() => ({\n    onToggle: () => onToggle == null ? void 0 : onToggle(!expanded),\n    bsPrefix,\n    expanded: !!expanded\n  }), [bsPrefix, expanded, onToggle]);\n  return /*#__PURE__*/_jsx(NavbarContext.Provider, {\n    value: navbarContext,\n    children: /*#__PURE__*/_jsx(SelectableContext.Provider, {\n      value: handleCollapse,\n      children: /*#__PURE__*/_jsx(Component, {\n        ref: ref,\n        ...controlledProps,\n        className: classNames(className, bsPrefix, expand && expandClass, variant && `${bsPrefix}-${variant}`, bg && `bg-${bg}`, sticky && `sticky-${sticky}`, fixed && `fixed-${fixed}`)\n      })\n    })\n  });\n});\nNavbar.defaultProps = defaultProps;\nNavbar.displayName = 'Navbar';\nexport default Object.assign(Navbar, {\n  Brand: NavbarBrand,\n  Collapse: NavbarCollapse,\n  Offcanvas: NavbarOffcanvas,\n  Text: NavbarText,\n  Toggle: NavbarToggle\n});"]},"metadata":{},"sourceType":"module"}
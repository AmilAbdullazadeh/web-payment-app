{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  visuallyHidden: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\n\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild,\n  ...props\n}, ref) => {\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","map":{"version":3,"sources":["/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/node_modules/react-bootstrap/esm/ProgressBar.js"],"names":["classNames","React","cloneElement","useBootstrapPrefix","map","jsx","_jsx","ROUND_PRECISION","onlyProgressBar","props","propName","componentName","children","error","Children","forEach","child","element","ProgressBar","type","childType","childIdentifier","isValidElement","displayName","name","Error","defaultProps","min","max","animated","isChild","visuallyHidden","striped","getPercentage","now","percentage","Math","round","renderProgressBar","label","className","style","variant","bsPrefix","ref","role","width","forwardRef","wrapperProps"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  visuallyHidden: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\n\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild,\n  ...props\n}, ref) => {\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;"]},"metadata":{},"sourceType":"module"}
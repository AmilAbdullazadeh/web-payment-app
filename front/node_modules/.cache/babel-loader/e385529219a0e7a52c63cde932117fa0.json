{"ast":null,"code":"var _jsxFileName = \"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/FormScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Col, Container, Form, Row, Button } from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport Receipt from \"../components/Receipt\";\nimport { CategoryListContext } from \"../contexts/CategoryListContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormScreen({\n  match,\n  history\n}) {\n  _s();\n\n  const categoryId = match.params.categoryId;\n  const providerId = match.params.providerId;\n  const [field, setField] = useState();\n  const [providers, setProviders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null); // form\n\n  const [number, setNumber] = useState('');\n  const [exp_month, setExpMonth] = useState('');\n  const [exp_year, setExpYear] = useState('');\n  const [cvv, setCvv] = useState('');\n  const [value, setValue] = useState('');\n  const [currency, setCurrency] = useState('');\n  const [datas, setDatas] = useState({});\n  const [validated, setValidated] = useState(false);\n  const [isSubmit, setIsSubmit] = useState(false);\n  const [dataRequest, setDataRequest] = useState({});\n  const [dataReceipt, setDataReceipt] = useState({});\n  const [showReceipt, setShowReceipt] = useState(false); // context api\n\n  const categoryList = useContext(CategoryListContext);\n  useEffect(() => {\n    try {\n      //  check local storage data\n      const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n\n      if (localData !== undefined && localData !== null) {\n        const categoryFiltered = localData.filter(category => category.id === +categoryId);\n        setProviders(categoryFiltered[0].providers);\n        const providerFiltered = providers.filter(provider => provider.id === +providerId);\n        setField(providerFiltered[0]); // setIsSubmit(true);\n        // setShowReceipt(true);\n        // setDataReceipt(localData);\n      } else {\n        history.push('/');\n      }\n    } catch (error) {\n      console.error(error);\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [loading, error, isSubmit, showReceipt]);\n\n  const fieldChanged = (key, value) => {\n    setDatas(currentValues => {\n      currentValues[key] = value;\n      return currentValues;\n    }); // for (const [key, value] of Object.entries(datas)) {\n    //     setKeyData(currentValues => {\n    //         currentValues = {\n    //             k: currentValues[key],\n    //             v: value\n    //         }\n    //         return currentValues;\n    //     });\n    // }\n    // console.info('keyData', keyData);\n  };\n\n  const handleSubmit = event => {\n    setIsSubmit(true);\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      event.preventDefault();\n      const data = [{\n        providerId: providerId,\n        fields: datas,\n        amount: {\n          value: value,\n          currency: currency\n        },\n        card: {\n          number: number,\n          exp_month: exp_month,\n          exp_year: exp_year,\n          cvv: cvv\n        }\n      }];\n      setDataRequest(data); // // for generate id\n      // const generateRandomString = (length = 10) => Math.random().toString(20).substr(2, length)\n      // let randomId = generateRandomString(200);\n      //\n      // // yyyy-MM-ddTHH:mm:ss\n      // let date_ob = new Date();\n      // // adjust 0 before single digit date\n      // let date = (\"0\" + date_ob.getDate()).slice(-2);\n      // // current month\n      // let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n      // // current year\n      // let year = date_ob.getFullYear();\n      // // current hours\n      // let hours = date_ob.getHours();\n      // // current minutes\n      // let minutes = date_ob.getMinutes();\n      // // current seconds\n      // let seconds = date_ob.getSeconds();\n      //\n      // const dateNow = `${year}-${month}-${date}T${hours}:${minutes}:${seconds}`;\n      //\n      // const receipt = {\n      //     id: randomId,\n      //     date: dateNow,\n      //     details: datas,\n      //     amount: {\n      //         value: value,\n      //         currency: currency\n      //     }\n      // }\n\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: dataRequest\n      };\n      console.log(requestOptions);\n      fetch(\"http://localhost:8080/payments/new\", requestOptions).then(response => response.json()).then(data => {\n        console.log('res data', data);\n        setDataReceipt(data); // local storage\n\n        localStorage.setItem('receiptStorage', JSON.stringify(data)); // eslint-disable-next-line no-unused-expressions\n\n        dataReceipt !== undefined && dataRequest !== undefined ? setShowReceipt(true) : setShowReceipt(false);\n      }).catch(error => {\n        console.error(error);\n        setError(error);\n      }).finally(() => setLoading(false));\n    }\n\n    setValidated(true);\n  };\n\n  const handleBack = () => {\n    const localeData = JSON.parse(localStorage.getItem('receiptStorage'));\n\n    if (localeData !== undefined || true) {\n      localStorage.removeItem('receiptStorage');\n      setIsSubmit(false);\n      setShowReceipt(false);\n    }\n\n    history.push('/');\n  };\n\n  if (loading) return \"Loading...\";\n  if (error) return /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleBack,\n      className: \"btn btn-light my-3\",\n      children: \"Go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormScreen, \"RIPqoD9ZElZzMsCwoPCNckgxD0o=\");\n\n_c = FormScreen;\nexport default FormScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormScreen\");","map":{"version":3,"sources":["/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/FormScreen.jsx"],"names":["React","useState","useEffect","useContext","Col","Container","Form","Row","Button","Message","Receipt","CategoryListContext","FormScreen","match","history","categoryId","params","providerId","field","setField","providers","setProviders","loading","setLoading","error","setError","number","setNumber","exp_month","setExpMonth","exp_year","setExpYear","cvv","setCvv","value","setValue","currency","setCurrency","datas","setDatas","validated","setValidated","isSubmit","setIsSubmit","dataRequest","setDataRequest","dataReceipt","setDataReceipt","showReceipt","setShowReceipt","categoryList","localData","JSON","parse","localStorage","getItem","undefined","categoryFiltered","filter","category","id","providerFiltered","provider","push","console","fieldChanged","key","currentValues","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","data","fields","amount","card","requestOptions","method","headers","body","log","fetch","then","response","json","setItem","stringify","catch","finally","handleBack","localeData","removeItem"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Form, Row, Button} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport Receipt from \"../components/Receipt\";\nimport {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction FormScreen({match, history}) {\n\n    const categoryId = match.params.categoryId;\n    const providerId = match.params.providerId;\n\n    const [field, setField] = useState();\n    const [providers, setProviders] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // form\n    const [number, setNumber] = useState('');\n    const [exp_month, setExpMonth] = useState('');\n    const [exp_year, setExpYear] = useState('');\n    const [cvv, setCvv] = useState('');\n\n    const [value, setValue] = useState('');\n    const [currency, setCurrency] = useState('');\n\n    const [datas, setDatas] = useState({})\n\n    const [validated, setValidated] = useState(false);\n\n    const [isSubmit, setIsSubmit] = useState(false);\n\n    const [dataRequest, setDataRequest] = useState({});\n    const [dataReceipt, setDataReceipt] = useState({});\n\n    const [showReceipt, setShowReceipt] = useState(false);\n\n    // context api\n    const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n            //  check local storage data\n            const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n            if (localData !== undefined && localData !== null) {\n                const categoryFiltered = localData.filter(category => category.id === +categoryId);\n                setProviders(categoryFiltered[0].providers);\n                const providerFiltered = providers.filter(provider => provider.id === +providerId);\n                setField(providerFiltered[0]);\n\n                // setIsSubmit(true);\n                // setShowReceipt(true);\n                // setDataReceipt(localData);\n            } else {\n                history.push('/');\n            }\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }, [loading, error, isSubmit, showReceipt]);\n\n    const fieldChanged = (key, value) => {\n        setDatas(currentValues => {\n            currentValues[key] = value;\n            return currentValues;\n        });\n\n        // for (const [key, value] of Object.entries(datas)) {\n        //     setKeyData(currentValues => {\n        //         currentValues = {\n        //             k: currentValues[key],\n        //             v: value\n        //         }\n        //         return currentValues;\n        //     });\n        // }\n\n        // console.info('keyData', keyData);\n    }\n\n    const handleSubmit = (event) => {\n        setIsSubmit(true);\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            event.preventDefault();\n\n            const data = [\n                {\n                    providerId: providerId,\n                    fields: datas,\n                    amount: {\n                        value: value,\n                        currency: currency\n                    },\n                    card: {\n                        number: number,\n                        exp_month: exp_month,\n                        exp_year: exp_year,\n                        cvv: cvv\n                    }\n                }\n            ]\n\n            setDataRequest(data);\n\n            // // for generate id\n            // const generateRandomString = (length = 10) => Math.random().toString(20).substr(2, length)\n            // let randomId = generateRandomString(200);\n            //\n            // // yyyy-MM-ddTHH:mm:ss\n            // let date_ob = new Date();\n            // // adjust 0 before single digit date\n            // let date = (\"0\" + date_ob.getDate()).slice(-2);\n            // // current month\n            // let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n            // // current year\n            // let year = date_ob.getFullYear();\n            // // current hours\n            // let hours = date_ob.getHours();\n            // // current minutes\n            // let minutes = date_ob.getMinutes();\n            // // current seconds\n            // let seconds = date_ob.getSeconds();\n            //\n            // const dateNow = `${year}-${month}-${date}T${hours}:${minutes}:${seconds}`;\n            //\n            // const receipt = {\n            //     id: randomId,\n            //     date: dateNow,\n            //     details: datas,\n            //     amount: {\n            //         value: value,\n            //         currency: currency\n            //     }\n            // }\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: dataRequest\n            };\n\n            console.log(requestOptions);\n\n            fetch(\"http://localhost:8080/payments/new\", requestOptions)\n                .then((response) => response.json())\n                .then((data) => {\n\n                    console.log('res data', data);\n                    setDataReceipt(data);\n\n                    // local storage\n                    localStorage.setItem('receiptStorage', JSON.stringify(data));\n\n                    // eslint-disable-next-line no-unused-expressions\n                    dataReceipt !== undefined && dataRequest !== undefined ? setShowReceipt(true) : setShowReceipt(false);\n\n                })\n                .catch((error) => {\n                    console.error(error);\n                    setError(error)\n                })\n                .finally(() => setLoading(false))\n        }\n        setValidated(true);\n    };\n\n    const handleBack = () => {\n        const localeData = JSON.parse(localStorage.getItem('receiptStorage'));\n\n        if (localeData !== undefined || true) {\n            localStorage.removeItem('receiptStorage');\n            setIsSubmit(false);\n            setShowReceipt(false);\n        }\n\n        history.push('/');\n    }\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <Button onClick={handleBack} className=\"btn btn-light my-3\">\n                Go back\n            </Button>\n            {/*{*/}\n            {/*    (isSubmit && showReceipt) ? <Receipt dataReceipt={dataReceipt}/>*/}\n            {/*        : (*/}\n            {/*            <div>*/}\n            {/*                <Form noValidate validated={validated} onSubmit={handleSubmit}>*/}\n            {/*                    <Row>*/}\n            {/*                        <Col sm={12} md={6} lg={4} xl={4}>*/}\n            {/*                            <div className=\"card-container\">*/}\n            {/*                                {field && field.fields.map((f, idx) => (*/}\n            {/*                                    <div key={idx}>*/}\n            {/*                                        <Form.Group className=\"mb-2\">*/}\n            {/*                                            <Form.Label>{f.label}</Form.Label>*/}\n            {/*                                            {*/}\n            {/*                                                f.type === 4 ?*/}\n            {/*                                                    (*/}\n            {/*                                                        <Form.Control*/}\n            {/*                                                            name={f.id}*/}\n            {/*                                                            as=\"select\"*/}\n            {/*                                                            required*/}\n            {/*                                                            onChange={(e) => fieldChanged(f.id, e.target.value)}*/}\n            {/*                                                        >*/}\n            {/*                                                            <option value=\"\">Select...</option>*/}\n            {/*                                                            {*/}\n            {/*                                                                f.options.map((option) => (*/}\n            {/*                                                                    <option*/}\n            {/*                                                                        key={option.key}*/}\n            {/*                                                                        value={option.value}*/}\n            {/*                                                                    >*/}\n            {/*                                                                        {option.value}*/}\n            {/*                                                                    </option>*/}\n            {/*                                                                ))*/}\n            {/*                                                            }*/}\n            {/*                                                        </Form.Control>*/}\n            {/*                                                    )*/}\n            {/*                                                    : (*/}\n            {/*                                                        <Form.Control*/}\n            {/*                                                            required*/}\n            {/*                                                            name={f.id}*/}\n            {/*                                                            type={f.type === 1 ? 'text' : (f.type === 2 && f.id !== 'number') || (f.type === 3 && f.id !== 'number') ? 'number' : f.type === 5 ? 'date' : 'text'}*/}\n            {/*                                                            placeholder={f.label}*/}\n            {/*                                                            maxLength={f.id === 'number' ? 7 : 55}*/}\n            {/*                                                            onChange={(e) => fieldChanged(f.id, e.target.value)}*/}\n            {/*                                                        />*/}\n            {/*                                                    )*/}\n            {/*                                            }*/}\n            {/*                                        </Form.Group>*/}\n            {/*                                    </div>*/}\n            {/*                                ))}*/}\n            {/*                                <Form.Group className=\"mb-2\" controlId=\"value\">*/}\n            {/*                                    <Form.Label>Amount</Form.Label>*/}\n            {/*                                    <Form.Control*/}\n            {/*                                        type=\"text\"*/}\n            {/*                                        placeholder=\"Amount\"*/}\n            {/*                                        required*/}\n            {/*                                        value={value}*/}\n            {/*                                        onChange={(e) => setValue(e.target.value)}*/}\n            {/*                                    />*/}\n            {/*                                </Form.Group>*/}\n            {/*                                <Form.Group className=\"mb-2\" controlId=\"currency\">*/}\n            {/*                                    <Form.Label>Currency</Form.Label>*/}\n            {/*                                    <Form.Control*/}\n            {/*                                        as=\"select\"*/}\n            {/*                                        required*/}\n            {/*                                        value={currency}*/}\n            {/*                                        onChange={(e) => setCurrency(e.target.value)}*/}\n            {/*                                    >*/}\n            {/*                                        <option value=\"\">Select...</option>*/}\n            {/*                                        <option value=\"USD\">USD</option>*/}\n            {/*                                    </Form.Control>*/}\n            {/*                                </Form.Group>*/}\n            {/*                            </div>*/}\n            {/*                        </Col>*/}\n            {/*                        <Col sm={12} md={6} lg={8} xl={5}>*/}\n            {/*                            <div className=\"card-container\">*/}\n            {/*                                <Col sm={12} md={12} lg={12} xl={12}>*/}\n            {/*                                    <Form.Group className=\"mb-2\" controlId=\"number\">*/}\n            {/*                                        <Form.Label>Card number</Form.Label>*/}\n            {/*                                        <Form.Control*/}\n            {/*                                            type=\"text\"*/}\n            {/*                                            placeholder=\"Card number\"*/}\n            {/*                                            required*/}\n            {/*                                            className=\"cardNumber\"*/}\n            {/*                                            value={number}*/}\n            {/*                                            maxLength=\"19\"*/}\n            {/*                                            onChange={(e) => setNumber(e.target.value)}*/}\n            {/*                                        />*/}\n            {/*                                    </Form.Group>*/}\n            {/*                                </Col>*/}\n            {/*                                <Col sm={12} md={12} lg={12} xl={12}>*/}\n            {/*                                    <Row>*/}\n            {/*                                        <Col sm={12} md={8} lg={6} xl={6}>*/}\n            {/*                                            <Form.Label>Exp date</Form.Label>*/}\n            {/*                                            <Form.Group className=\"exp mb-2\" controlId=\"exp_month\">*/}\n            {/*                                                <Form.Control*/}\n            {/*                                                    type=\"text\"*/}\n            {/*                                                    placeholder=\"ExpMonth\"*/}\n            {/*                                                    required*/}\n            {/*                                                    className=\"exp-left\"*/}\n            {/*                                                    value={exp_month}*/}\n            {/*                                                    maxLength=\"2\"*/}\n            {/*                                                    onChange={(e) => setExpMonth(e.target.value)}*/}\n            {/*                                                />*/}\n            {/*                                                <span className=\"exp-line\"/>*/}\n            {/*                                                <Form.Control*/}\n            {/*                                                    type=\"text\"*/}\n            {/*                                                    placeholder=\"ExpYear\"*/}\n            {/*                                                    required*/}\n            {/*                                                    className=\"exp-right\"*/}\n            {/*                                                    value={exp_year}*/}\n            {/*                                                    maxLength=\"2\"*/}\n            {/*                                                    onChange={(e) => setExpYear(e.target.value)}*/}\n            {/*                                                />*/}\n            {/*                                            </Form.Group>*/}\n            {/*                                        </Col>*/}\n            {/*                                        <Col sm={12} md={8} lg={6} xl={6}>*/}\n            {/*                                            <Form.Group className=\"mb-2\" controlId=\"cvv\">*/}\n            {/*                                                <Form.Label>CVV</Form.Label>*/}\n            {/*                                                <Form.Control*/}\n            {/*                                                    type=\"text\"*/}\n            {/*                                                    placeholder=\"CVV\"*/}\n            {/*                                                    required*/}\n            {/*                                                    className=\"cvv\"*/}\n            {/*                                                    value={cvv}*/}\n            {/*                                                    maxLength=\"3\"*/}\n            {/*                                                    onChange={(e) => setCvv(e.target.value)}*/}\n            {/*                                                />*/}\n            {/*                                            </Form.Group>*/}\n            {/*                                        </Col>*/}\n            {/*                                    </Row>*/}\n            {/*                                </Col>*/}\n            {/*                                <Col sm={12} md={12} lg={12} xl={12}>*/}\n            {/*                                    <Button className='submitButton' variant=\"primary\" type=\"submit\">*/}\n            {/*                                        Submit*/}\n            {/*                                    </Button>*/}\n            {/*                                </Col>*/}\n            {/*                            </div>*/}\n            {/*                        </Col>*/}\n            {/*                    </Row>*/}\n            {/*                </Form>*/}\n            {/*            </div>*/}\n            {/*        )*/}\n            {/*}*/}\n        </Container>\n    );\n}\n\nexport default FormScreen;\n"]},"metadata":{},"sourceType":"module"}
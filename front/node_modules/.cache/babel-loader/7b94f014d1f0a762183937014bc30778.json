{"ast":null,"code":"var _jsxFileName = \"/Users/amilabdullayev/Desktop/Projects/web-payment-app/src/screens/FormScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Col, Container, Form, Row, Button } from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport Receipt from \"../components/Receipt\";\nimport { CategoryListContext } from \"../contexts/CategoryListContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormScreen({\n  match,\n  history\n}) {\n  _s();\n\n  const categoryId = match.params.categoryId;\n  const providerId = match.params.providerId;\n  const [type, setType] = useState(null);\n  const [field, setField] = useState();\n  const [providers, setProviders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null); // form\n\n  const [number, setNumber] = useState('');\n  const [exp_month, setExpMonth] = useState('');\n  const [exp_year, setExpYear] = useState('');\n  const [cvv, setCvv] = useState('');\n  const [value, setValue] = useState('');\n  const [currency, setCurrency] = useState('');\n  const [datas, setDatas] = useState({});\n  const [validated, setValidated] = useState(false);\n  const [isSubmit, setIsSubmit] = useState(false);\n  const [dataRequest, setDataRequest] = useState({});\n  const [dataReceipt, setDataReceipt] = useState({});\n  const [showReceipt, setShowReceipt] = useState(false);\n  const categoryList = useContext(CategoryListContext);\n  useEffect(() => {\n    try {\n      //  check locale storage data\n      const localeData = JSON.parse(localStorage.getItem('receiptStorage'));\n\n      if (localeData !== undefined || true) {\n        setIsSubmit(true);\n        setShowReceipt(true);\n        setDataReceipt(localeData);\n      }\n\n      const categoryFiltered = categoryList.filter(category => category.id === categoryId);\n      const providerFiltered = providers.filter(provider => provider.id === providerId);\n      setProviders(categoryFiltered[0].providers);\n      setField(providerFiltered[0]);\n    } catch (error) {\n      console.error(error);\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [loading, error, isSubmit, showReceipt]);\n\n  const fieldChanged = (key, value) => {\n    setDatas(currentValues => {\n      currentValues[key] = value;\n      return currentValues;\n    }); // for (const [key, value] of Object.entries(datas)) {\n    //     setKeyData(currentValues => {\n    //         currentValues = {\n    //             k: currentValues[key],\n    //             v: value\n    //         }\n    //         return currentValues;\n    //     });\n    // }\n    // console.info('keyData', keyData);\n  };\n\n  const handleSubmit = event => {\n    setIsSubmit(true);\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      event.preventDefault();\n      const data = [{\n        providerId: providerId,\n        fields: datas,\n        amount: {\n          value: value,\n          currency: currency\n        },\n        card: {\n          number: number,\n          exp_month: exp_month,\n          exp_year: exp_year,\n          cvv: cvv\n        }\n      }];\n      setDataRequest(data); // for generate id\n\n      const generateRandomString = (length = 10) => Math.random().toString(20).substr(2, length);\n\n      let randomId = generateRandomString(200); // yyyy-MM-ddTHH:mm:ss\n\n      let date_ob = new Date(); // adjust 0 before single digit date\n\n      let date = (\"0\" + date_ob.getDate()).slice(-2); // current month\n\n      let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2); // current year\n\n      let year = date_ob.getFullYear(); // current hours\n\n      let hours = date_ob.getHours(); // current minutes\n\n      let minutes = date_ob.getMinutes(); // current seconds\n\n      let seconds = date_ob.getSeconds();\n      const dateNow = `${year}-${month}-${date}T${hours}:${minutes}:${seconds}`;\n      const receipt = {\n        id: randomId,\n        date: dateNow,\n        details: datas,\n        amount: {\n          value: value,\n          currency: currency\n        }\n      };\n      setDataReceipt(receipt); // local storage\n\n      localStorage.setItem('receiptStorage', JSON.stringify(receipt)); // eslint-disable-next-line no-unused-expressions\n\n      dataReceipt !== undefined && dataRequest !== undefined ? setShowReceipt(true) : setShowReceipt(false);\n    }\n\n    setValidated(true);\n  };\n\n  const handleBack = () => {\n    const localeData = JSON.parse(localStorage.getItem('receiptStorage'));\n\n    if (localeData !== undefined || true) {\n      localStorage.removeItem('receiptStorage');\n      setIsSubmit(false);\n      setShowReceipt(false);\n    }\n\n    history.push('/');\n  };\n\n  if (loading) return \"Loading...\";\n  if (error) return /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleBack,\n      className: \"btn btn-light my-3\",\n      children: \"Go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), isSubmit && showReceipt ? /*#__PURE__*/_jsxDEV(Receipt, {\n      dataReceipt: dataReceipt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 45\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        validated: validated,\n        onSubmit: handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            sm: 12,\n            md: 6,\n            lg: 4,\n            xl: 4,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-container\",\n              children: [field && field.fields.map((f, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  className: \"mb-2\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: f.label\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 186,\n                    columnNumber: 57\n                  }, this), f.type === 4 ? /*#__PURE__*/_jsxDEV(Form.Control, {\n                    name: f.id,\n                    as: \"select\",\n                    required: true,\n                    onChange: e => fieldChanged(f.id, e.target.value),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"Select...\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 196,\n                      columnNumber: 73\n                    }, this), f.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: option.v,\n                      children: option.v\n                    }, option.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 199,\n                      columnNumber: 81\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 69\n                  }, this) : /*#__PURE__*/_jsxDEV(Form.Control, {\n                    required: true,\n                    name: f.id,\n                    type: f.type === 1 ? 'text' : f.type === 2 && f.id !== 'phone_number' || f.type === 3 && f.id !== 'phone_number' ? 'number' : f.type === 5 ? 'date' : 'text',\n                    placeholder: f.label,\n                    maxLength: f.id === 'phone_number' ? 7 : 55,\n                    onChange: e => fieldChanged(f.id, e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 69\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 53\n                }, this)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 49\n              }, this)), /*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"mb-2\",\n                controlId: \"value\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  type: \"text\",\n                  placeholder: \"Amount\",\n                  required: true,\n                  value: value,\n                  onChange: e => setValue(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                className: \"mb-2\",\n                controlId: \"currency\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: \"Currency\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                  as: \"select\",\n                  required: true,\n                  value: currency,\n                  onChange: e => setCurrency(e.target.value),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Select...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"USD\",\n                    children: \"USD\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 12,\n            md: 6,\n            lg: 8,\n            xl: 5,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-container\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                md: 12,\n                lg: 12,\n                xl: 12,\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  className: \"mb-2\",\n                  controlId: \"number\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Card number\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"text\",\n                    placeholder: \"Card number\",\n                    required: true,\n                    className: \"cardNumber\",\n                    value: number,\n                    maxLength: \"19\",\n                    onChange: e => setNumber(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 252,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 250,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                md: 12,\n                lg: 12,\n                xl: 12,\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    sm: 12,\n                    md: 8,\n                    lg: 6,\n                    xl: 6,\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Exp date\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 57\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                      className: \"exp mb-2\",\n                      controlId: \"exp_month\",\n                      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                        type: \"text\",\n                        placeholder: \"ExpMonth\",\n                        required: true,\n                        className: \"exp-left\",\n                        value: exp_month,\n                        maxLength: \"2\",\n                        onChange: e => setExpMonth(e.target.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 268,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"exp-line\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 277,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                        type: \"text\",\n                        placeholder: \"ExpYear\",\n                        required: true,\n                        className: \"exp-right\",\n                        value: exp_year,\n                        maxLength: \"2\",\n                        onChange: e => setExpYear(e.target.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 278,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 267,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    sm: 12,\n                    md: 8,\n                    lg: 6,\n                    xl: 6,\n                    children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                      className: \"mb-2\",\n                      controlId: \"cvv\",\n                      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                        children: \"CVV\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 291,\n                        columnNumber: 61\n                      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                        type: \"text\",\n                        placeholder: \"CVV\",\n                        required: true,\n                        className: \"cvv\",\n                        value: cvv,\n                        maxLength: \"3\",\n                        onChange: e => setCvv(e.target.value)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 292,\n                        columnNumber: 61\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 290,\n                      columnNumber: 57\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 53\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: 12,\n                md: 12,\n                lg: 12,\n                xl: 12,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"submitButton\",\n                  variant: \"primary\",\n                  type: \"submit\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormScreen, \"OnL5yP3MNKUCa2V17MFU2haQVuw=\");\n\n_c = FormScreen;\nexport default FormScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormScreen\");","map":{"version":3,"sources":["/Users/amilabdullayev/Desktop/Projects/web-payment-app/src/screens/FormScreen.jsx"],"names":["React","useState","useEffect","useContext","Col","Container","Form","Row","Button","Message","Receipt","CategoryListContext","FormScreen","match","history","categoryId","params","providerId","type","setType","field","setField","providers","setProviders","loading","setLoading","error","setError","number","setNumber","exp_month","setExpMonth","exp_year","setExpYear","cvv","setCvv","value","setValue","currency","setCurrency","datas","setDatas","validated","setValidated","isSubmit","setIsSubmit","dataRequest","setDataRequest","dataReceipt","setDataReceipt","showReceipt","setShowReceipt","categoryList","localeData","JSON","parse","localStorage","getItem","undefined","categoryFiltered","filter","category","id","providerFiltered","provider","console","fieldChanged","key","currentValues","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","data","fields","amount","card","generateRandomString","length","Math","random","toString","substr","randomId","date_ob","Date","date","getDate","slice","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","dateNow","receipt","details","setItem","stringify","handleBack","removeItem","push","map","f","idx","label","e","target","options","option","v"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Form, Row, Button} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport Receipt from \"../components/Receipt\";\nimport {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction FormScreen({match, history}) {\n\n    const categoryId = match.params.categoryId;\n    const providerId = match.params.providerId;\n\n    const [type, setType] = useState(null);\n    const [field, setField] = useState();\n    const [providers, setProviders] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // form\n    const [number, setNumber] = useState('');\n    const [exp_month, setExpMonth] = useState('');\n    const [exp_year, setExpYear] = useState('');\n    const [cvv, setCvv] = useState('');\n\n    const [value, setValue] = useState('');\n    const [currency, setCurrency] = useState('');\n\n    const [datas, setDatas] = useState({})\n\n    const [validated, setValidated] = useState(false);\n\n    const [isSubmit, setIsSubmit] = useState(false);\n\n    const [dataRequest, setDataRequest] = useState({});\n    const [dataReceipt, setDataReceipt] = useState({});\n\n    const [showReceipt, setShowReceipt] = useState(false);\n\n    const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n\n            //  check locale storage data\n            const localeData = JSON.parse(localStorage.getItem('receiptStorage'));\n            if (localeData !== undefined || true) {\n                setIsSubmit(true);\n                setShowReceipt(true);\n                setDataReceipt(localeData);\n            }\n\n            const categoryFiltered = categoryList.filter(category => category.id === categoryId);\n            const providerFiltered = providers.filter(provider => provider.id === providerId);\n\n            setProviders(categoryFiltered[0].providers);\n            setField(providerFiltered[0]);\n\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }, [loading, error, isSubmit, showReceipt]);\n\n    const fieldChanged = (key, value) => {\n        setDatas(currentValues => {\n            currentValues[key] = value;\n            return currentValues;\n        });\n\n        // for (const [key, value] of Object.entries(datas)) {\n        //     setKeyData(currentValues => {\n        //         currentValues = {\n        //             k: currentValues[key],\n        //             v: value\n        //         }\n        //         return currentValues;\n        //     });\n        // }\n\n        // console.info('keyData', keyData);\n    }\n\n    const handleSubmit = (event) => {\n        setIsSubmit(true);\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            event.preventDefault();\n\n            const data = [\n                {\n                    providerId: providerId,\n                    fields: datas,\n                    amount: {\n                        value: value,\n                        currency: currency\n                    },\n                    card: {\n                        number: number,\n                        exp_month: exp_month,\n                        exp_year: exp_year,\n                        cvv: cvv\n                    }\n                }\n            ]\n\n            setDataRequest(data);\n\n            // for generate id\n            const generateRandomString = (length = 10) => Math.random().toString(20).substr(2, length)\n            let randomId = generateRandomString(200);\n\n            // yyyy-MM-ddTHH:mm:ss\n            let date_ob = new Date();\n            // adjust 0 before single digit date\n            let date = (\"0\" + date_ob.getDate()).slice(-2);\n            // current month\n            let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n            // current year\n            let year = date_ob.getFullYear();\n            // current hours\n            let hours = date_ob.getHours();\n            // current minutes\n            let minutes = date_ob.getMinutes();\n            // current seconds\n            let seconds = date_ob.getSeconds();\n\n            const dateNow = `${year}-${month}-${date}T${hours}:${minutes}:${seconds}`;\n\n            const receipt = {\n                id: randomId,\n                date: dateNow,\n                details: datas,\n                amount: {\n                    value: value,\n                    currency: currency\n                }\n            }\n\n            setDataReceipt(receipt);\n\n            // local storage\n            localStorage.setItem('receiptStorage', JSON.stringify(receipt));\n\n            // eslint-disable-next-line no-unused-expressions\n            dataReceipt !== undefined && dataRequest !== undefined ? setShowReceipt(true) : setShowReceipt(false);\n\n        }\n        setValidated(true);\n    };\n\n    const handleBack = () => {\n        const localeData = JSON.parse(localStorage.getItem('receiptStorage'));\n\n        if (localeData !== undefined || true) {\n            localStorage.removeItem('receiptStorage');\n            setIsSubmit(false);\n            setShowReceipt(false);\n        }\n\n        history.push('/');\n    }\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <Button onClick={handleBack} className=\"btn btn-light my-3\">\n                Go back\n            </Button>\n            {\n                (isSubmit && showReceipt) ? <Receipt dataReceipt={dataReceipt}/>\n                    : (\n                        <div>\n                            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                                <Row>\n                                    <Col sm={12} md={6} lg={4} xl={4}>\n                                        <div className=\"card-container\">\n                                            {field && field.fields.map((f, idx) => (\n                                                <div key={idx}>\n                                                    <Form.Group className=\"mb-2\">\n                                                        <Form.Label>{f.label}</Form.Label>\n                                                        {\n                                                            f.type === 4 ?\n                                                                (\n                                                                    <Form.Control\n                                                                        name={f.id}\n                                                                        as=\"select\"\n                                                                        required\n                                                                        onChange={(e) => fieldChanged(f.id, e.target.value)}\n                                                                    >\n                                                                        <option value=\"\">Select...</option>\n                                                                        {\n                                                                            f.options.map((option) => (\n                                                                                <option\n                                                                                    key={option.id}\n                                                                                    value={option.v}\n                                                                                >\n                                                                                    {option.v}\n                                                                                </option>\n                                                                            ))\n                                                                        }\n                                                                    </Form.Control>\n                                                                )\n                                                                : (\n                                                                    <Form.Control\n                                                                        required\n                                                                        name={f.id}\n                                                                        type={f.type === 1 ? 'text' : (f.type === 2 && f.id !== 'phone_number') || (f.type === 3 && f.id !== 'phone_number') ? 'number' : f.type === 5 ? 'date' : 'text'}\n                                                                        placeholder={f.label}\n                                                                        maxLength={f.id === 'phone_number' ? 7 : 55}\n                                                                        onChange={(e) => fieldChanged(f.id, e.target.value)}\n                                                                    />\n                                                                )\n                                                        }\n                                                    </Form.Group>\n                                                </div>\n                                            ))}\n                                            <Form.Group className=\"mb-2\" controlId=\"value\">\n                                                <Form.Label>Amount</Form.Label>\n                                                <Form.Control\n                                                    type=\"text\"\n                                                    placeholder=\"Amount\"\n                                                    required\n                                                    value={value}\n                                                    onChange={(e) => setValue(e.target.value)}\n                                                />\n                                            </Form.Group>\n                                            <Form.Group className=\"mb-2\" controlId=\"currency\">\n                                                <Form.Label>Currency</Form.Label>\n                                                <Form.Control\n                                                    as=\"select\"\n                                                    required\n                                                    value={currency}\n                                                    onChange={(e) => setCurrency(e.target.value)}\n                                                >\n                                                    <option value=\"\">Select...</option>\n                                                    <option value=\"USD\">USD</option>\n                                                </Form.Control>\n                                            </Form.Group>\n                                        </div>\n                                    </Col>\n                                    <Col sm={12} md={6} lg={8} xl={5}>\n                                        <div className=\"card-container\">\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Form.Group className=\"mb-2\" controlId=\"number\">\n                                                    <Form.Label>Card number</Form.Label>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        placeholder=\"Card number\"\n                                                        required\n                                                        className=\"cardNumber\"\n                                                        value={number}\n                                                        maxLength=\"19\"\n                                                        onChange={(e) => setNumber(e.target.value)}\n                                                    />\n                                                </Form.Group>\n                                            </Col>\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Row>\n                                                    <Col sm={12} md={8} lg={6} xl={6}>\n                                                        <Form.Label>Exp date</Form.Label>\n                                                        <Form.Group className=\"exp mb-2\" controlId=\"exp_month\">\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"ExpMonth\"\n                                                                required\n                                                                className=\"exp-left\"\n                                                                value={exp_month}\n                                                                maxLength=\"2\"\n                                                                onChange={(e) => setExpMonth(e.target.value)}\n                                                            />\n                                                            <span className=\"exp-line\"/>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"ExpYear\"\n                                                                required\n                                                                className=\"exp-right\"\n                                                                value={exp_year}\n                                                                maxLength=\"2\"\n                                                                onChange={(e) => setExpYear(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col sm={12} md={8} lg={6} xl={6}>\n                                                        <Form.Group className=\"mb-2\" controlId=\"cvv\">\n                                                            <Form.Label>CVV</Form.Label>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"CVV\"\n                                                                required\n                                                                className=\"cvv\"\n                                                                value={cvv}\n                                                                maxLength=\"3\"\n                                                                onChange={(e) => setCvv(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Button className='submitButton' variant=\"primary\" type=\"submit\">\n                                                    Submit\n                                                </Button>\n                                            </Col>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        </div>\n                    )\n            }\n        </Container>\n    );\n}\n\nexport default FormScreen;\n"]},"metadata":{},"sourceType":"module"}
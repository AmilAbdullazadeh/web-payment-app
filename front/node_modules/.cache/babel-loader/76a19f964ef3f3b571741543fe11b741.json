{"ast":null,"code":"import qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport { useCallback, useRef, useEffect, useMemo, useContext } from 'react';\nimport * as React from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useGlobalListener from '@restart/hooks/useGlobalListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle, { isRoleMenu } from './DropdownToggle';\nimport DropdownItem from './DropdownItem';\nimport SelectableContext from './SelectableContext';\nimport { dataAttr } from './DataKey';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useRefWithUpdate() {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(null);\n  const attachRef = useCallback(element => {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\n * @displayName Dropdown\n * @public\n */\n\n\nfunction Dropdown({\n  defaultShow,\n  show: rawShow,\n  onSelect,\n  onToggle: rawOnToggle,\n  itemSelector = `* [${dataAttr('dropdown-item')}]`,\n  focusFirstItemOnShow,\n  placement = 'bottom-start',\n  children\n}) {\n  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle); // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n  const [menuRef, setMenu] = useRefWithUpdate();\n  const menuElement = menuRef.current;\n  const [toggleRef, setToggle] = useRefWithUpdate();\n  const toggleElement = toggleRef.current;\n  const lastShow = usePrevious(show);\n  const lastSourceEvent = useRef(null);\n  const focusInDropdown = useRef(false);\n  const onSelectCtx = useContext(SelectableContext);\n  const toggle = useCallback((nextShow, event, source = event == null ? void 0 : event.type) => {\n    onToggle(nextShow, {\n      originalEvent: event,\n      source\n    });\n  }, [onToggle]);\n  const handleSelect = useEventCallback((key, event) => {\n    onSelect == null ? void 0 : onSelect(key, event);\n    toggle(false, event, 'select');\n\n    if (!event.isPropagationStopped()) {\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    }\n  });\n  const context = useMemo(() => ({\n    toggle,\n    placement,\n    show,\n    menuElement,\n    toggleElement,\n    setMenu,\n    setToggle\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  const focusToggle = useEventCallback(() => {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  const maybeFocusFirst = useEventCallback(() => {\n    const type = lastSourceEvent.current;\n    let focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && isRoleMenu(menuRef.current) ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    const first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(() => {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(() => {\n    lastSourceEvent.current = null;\n  });\n\n  const getNextFocusedChild = (current, offset) => {\n    if (!menuRef.current) return null;\n    const items = qsa(menuRef.current, itemSelector);\n    let index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  useGlobalListener('keydown', event => {\n    var _menuRef$current, _toggleRef$current;\n\n    const {\n      key\n    } = event;\n    const target = event.target;\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    const isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {\n      return;\n    }\n\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n\n    if (key === 'Tab' && (!menuRef.current || !show)) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n    const meta = {\n      originalEvent: event,\n      source: event.type\n    };\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          const next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          onToggle(true, meta);\n        } else {\n          const next = getNextFocusedChild(target, 1);\n          if (next && next.focus) next.focus();\n        }\n\n        return;\n\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(document, 'keyup', e => {\n          var _menuRef$current2;\n\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, meta);\n          }\n        }, {\n          once: true\n        });\n        break;\n\n      case 'Escape':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        onToggle(false, meta);\n        break;\n\n      default:\n    }\n  });\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(DropdownContext.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\n\nDropdown.displayName = 'Dropdown';\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nDropdown.Item = DropdownItem;\nexport default Dropdown;","map":{"version":3,"sources":["/Users/amilabdullayev/Desktop/Projects/web-payment-app/node_modules/@restart/ui/esm/Dropdown.js"],"names":["qsa","addEventListener","useCallback","useRef","useEffect","useMemo","useContext","React","useUncontrolledProp","usePrevious","useForceUpdate","useGlobalListener","useEventCallback","DropdownContext","DropdownMenu","DropdownToggle","isRoleMenu","DropdownItem","SelectableContext","dataAttr","jsx","_jsx","useRefWithUpdate","forceUpdate","ref","attachRef","element","current","Dropdown","defaultShow","show","rawShow","onSelect","onToggle","rawOnToggle","itemSelector","focusFirstItemOnShow","placement","children","menuRef","setMenu","menuElement","toggleRef","setToggle","toggleElement","lastShow","lastSourceEvent","focusInDropdown","onSelectCtx","toggle","nextShow","event","source","type","originalEvent","handleSelect","key","isPropagationStopped","context","contains","document","activeElement","focusToggle","focus","maybeFocusFirst","focusType","test","first","getNextFocusedChild","offset","items","index","indexOf","Math","max","min","length","_menuRef$current","_toggleRef$current","target","fromMenu","fromToggle","isInput","tagName","meta","next","preventDefault","e","_menuRef$current2","once","stopPropagation","Provider","value","displayName","Menu","Toggle","Item"],"mappings":"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","sourcesContent":["import qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport { useCallback, useRef, useEffect, useMemo, useContext } from 'react';\nimport * as React from 'react';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useGlobalListener from '@restart/hooks/useGlobalListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle, { isRoleMenu } from './DropdownToggle';\nimport DropdownItem from './DropdownItem';\nimport SelectableContext from './SelectableContext';\nimport { dataAttr } from './DataKey';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction useRefWithUpdate() {\n  const forceUpdate = useForceUpdate();\n  const ref = useRef(null);\n  const attachRef = useCallback(element => {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\n * @displayName Dropdown\n * @public\n */\n\n\nfunction Dropdown({\n  defaultShow,\n  show: rawShow,\n  onSelect,\n  onToggle: rawOnToggle,\n  itemSelector = `* [${dataAttr('dropdown-item')}]`,\n  focusFirstItemOnShow,\n  placement = 'bottom-start',\n  children\n}) {\n  const [show, onToggle] = useUncontrolledProp(rawShow, defaultShow, rawOnToggle); // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n  const [menuRef, setMenu] = useRefWithUpdate();\n  const menuElement = menuRef.current;\n  const [toggleRef, setToggle] = useRefWithUpdate();\n  const toggleElement = toggleRef.current;\n  const lastShow = usePrevious(show);\n  const lastSourceEvent = useRef(null);\n  const focusInDropdown = useRef(false);\n  const onSelectCtx = useContext(SelectableContext);\n  const toggle = useCallback((nextShow, event, source = event == null ? void 0 : event.type) => {\n    onToggle(nextShow, {\n      originalEvent: event,\n      source\n    });\n  }, [onToggle]);\n  const handleSelect = useEventCallback((key, event) => {\n    onSelect == null ? void 0 : onSelect(key, event);\n    toggle(false, event, 'select');\n\n    if (!event.isPropagationStopped()) {\n      onSelectCtx == null ? void 0 : onSelectCtx(key, event);\n    }\n  });\n  const context = useMemo(() => ({\n    toggle,\n    placement,\n    show,\n    menuElement,\n    toggleElement,\n    setMenu,\n    setToggle\n  }), [toggle, placement, show, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  const focusToggle = useEventCallback(() => {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  const maybeFocusFirst = useEventCallback(() => {\n    const type = lastSourceEvent.current;\n    let focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && isRoleMenu(menuRef.current) ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    const first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(() => {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(() => {\n    lastSourceEvent.current = null;\n  });\n\n  const getNextFocusedChild = (current, offset) => {\n    if (!menuRef.current) return null;\n    const items = qsa(menuRef.current, itemSelector);\n    let index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  useGlobalListener('keydown', event => {\n    var _menuRef$current, _toggleRef$current;\n\n    const {\n      key\n    } = event;\n    const target = event.target;\n    const fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    const fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    const isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {\n      return;\n    }\n\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n\n    if (key === 'Tab' && (!menuRef.current || !show)) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n    const meta = {\n      originalEvent: event,\n      source: event.type\n    };\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          const next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          onToggle(true, meta);\n        } else {\n          const next = getNextFocusedChild(target, 1);\n          if (next && next.focus) next.focus();\n        }\n\n        return;\n\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(document, 'keyup', e => {\n          var _menuRef$current2;\n\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, meta);\n          }\n        }, {\n          once: true\n        });\n        break;\n\n      case 'Escape':\n        if (key === 'Escape') {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        onToggle(false, meta);\n        break;\n\n      default:\n    }\n  });\n  return /*#__PURE__*/_jsx(SelectableContext.Provider, {\n    value: handleSelect,\n    children: /*#__PURE__*/_jsx(DropdownContext.Provider, {\n      value: context,\n      children: children\n    })\n  });\n}\n\nDropdown.displayName = 'Dropdown';\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nDropdown.Item = DropdownItem;\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}
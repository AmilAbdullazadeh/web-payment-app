{"ast":null,"code":"var _jsxFileName = \"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/ProviderScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport { Link } from \"react-router-dom\";\nimport Provider from \"../components/Provider\";\nimport { CategoryListContext } from \"../contexts/CategoryListContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProviderScreen({\n  match,\n  history\n}) {\n  _s();\n\n  const categoryId = match.params.id;\n  const [categoryFiltered, setCategoryFiltered] = useState();\n  const [providers, setProviders] = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null); // context api\n\n  const categoryList = useContext(CategoryListContext);\n  useEffect(() => {\n    try {\n      //  check local storage data\n      const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n\n      if (localData !== undefined && localData !== null) {\n        const categoryFiltered = localData.filter(category => category.id === categoryId);\n        setCategoryFiltered(categoryFiltered[0]);\n        setProviders(categoryFiltered[0]);\n      }\n    } catch (error) {\n      console.error(error);\n      setError(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [error, loading]);\n  if (loading) return \"Loading...\";\n  if (error) return /*#__PURE__*/_jsxDEV(Message, {\n    variant: \"danger\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Providers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn btn-light my-3\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: providers.map(provider => /*#__PURE__*/_jsxDEV(Col, {\n          sm: 12,\n          md: 6,\n          lg: 4,\n          xl: 3,\n          children: /*#__PURE__*/_jsxDEV(Provider, {\n            categoryId: categoryId,\n            provider: provider\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)\n        }, provider.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ProviderScreen, \"XuNfA4VJ1UhrWxYwEppFNkbuBEA=\");\n\n_c = ProviderScreen;\nexport default ProviderScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProviderScreen\");","map":{"version":3,"sources":["/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/ProviderScreen.jsx"],"names":["React","useState","useEffect","useContext","Col","Container","Row","Message","Link","Provider","CategoryListContext","ProviderScreen","match","history","categoryId","params","id","categoryFiltered","setCategoryFiltered","providers","setProviders","loading","setLoading","error","setError","categoryList","localData","JSON","parse","localStorage","getItem","undefined","filter","category","console","map","provider"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport {Link} from \"react-router-dom\";\nimport Provider from \"../components/Provider\";\nimport {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction ProviderScreen({match, history}) {\n\n    const categoryId = match.params.id;\n\n    const [categoryFiltered, setCategoryFiltered] = useState();\n    const [providers, setProviders] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // context api\n    const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n            //  check local storage data\n            const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n            if (localData !== undefined && localData !== null) {\n                const categoryFiltered = localData.filter(category => category.id === categoryId);\n                setCategoryFiltered(categoryFiltered[0]);\n                setProviders(categoryFiltered[0]);\n            }\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }, [error, loading]);\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <h1>Providers</h1>\n            <Link to=\"/\" className=\"btn btn-light my-3\">\n                Go Back\n            </Link>\n            <div>\n                <Row>\n                    {providers.map((provider) => (\n                        <Col key={provider.id} sm={12} md={6} lg={4} xl={3}>\n                            <Provider categoryId={categoryId} provider={provider}/>\n                        </Col>\n                    ))}\n                </Row>\n            </div>\n        </Container>\n    );\n}\n\nexport default ProviderScreen;\n"]},"metadata":{},"sourceType":"module"}
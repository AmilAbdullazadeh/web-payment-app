[{"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/index.js":"1","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/App.js":"2","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/reportWebVitals.js":"3","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/contexts/CategoryListContext.js":"4","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/HomeScreen.jsx":"5","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/FormScreen.jsx":"6","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/ProviderScreen.jsx":"7","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/components/Category.js":"8","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/components/Receipt.js":"9","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/components/Message.js":"10","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/components/Provider.js":"11"},{"size":563,"mtime":1634800038195,"results":"12","hashOfConfig":"13"},{"size":832,"mtime":1635332065192,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1634736929532,"results":"15","hashOfConfig":"13"},{"size":129,"mtime":1635236643990,"results":"16","hashOfConfig":"13"},{"size":1962,"mtime":1635332065195,"results":"17","hashOfConfig":"13"},{"size":15725,"mtime":1635416798816,"results":"18","hashOfConfig":"13"},{"size":2088,"mtime":1635333988393,"results":"19","hashOfConfig":"13"},{"size":527,"mtime":1634889858823,"results":"20","hashOfConfig":"13"},{"size":1767,"mtime":1635416838655,"results":"21","hashOfConfig":"13"},{"size":194,"mtime":1634800796916,"results":"22","hashOfConfig":"13"},{"size":549,"mtime":1634889871936,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1xlbemg",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/index.js",[],["50","51"],"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/App.js",[],"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/reportWebVitals.js",[],"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/contexts/CategoryListContext.js",[],"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/HomeScreen.jsx",["52"],"import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Category from \"../components/Category\";\nimport Message from \"../components/Message\";\n// import {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction HomeScreen() {\n\n    const [categories, setCategories] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // context api\n    // const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        fetch(\"http://localhost:8080/payments/categories\")\n            .then((response) => response.json())\n            .then((data) => {\n                //  check local storage data\n                const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n                if (localData !== undefined && localData !== null) {\n                    localStorage.setItem('categoryListStorage', JSON.stringify(data));\n                    setCategories(localData)\n                }\n\n                // local storage\n                localStorage.setItem('categoryListStorage', JSON.stringify(data));\n                setCategories(data)\n            })\n            .catch((error) => {\n                console.error(error);\n                setError(error)\n            })\n            .finally(() => setLoading(false))\n    }, [loading, error]);\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <h1>Categories</h1>\n            <div>\n                <Row>\n                    {categories.map((category) => (\n                        <Col key={category.id} sm={12} md={6} lg={4} xl={3}>\n                            <Category category={category}/>\n                        </Col>\n                    ))}\n                </Row>\n            </div>\n        </Container>\n    );\n}\n\nexport default HomeScreen;\n","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/FormScreen.jsx",["53","54","55","56","57","58"],"import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Form, Row, Button} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport Receipt from \"../components/Receipt\";\nimport {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction FormScreen({match, history}) {\n\n    const categoryId = match.params.categoryId;\n    const providerId = match.params.providerId;\n\n    const [keyData, setKeyData] = useState();\n    const [field, setField] = useState();\n    const [providers, setProviders] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // form\n    const [number, setNumber] = useState('');\n    const [exp_month, setExpMonth] = useState('');\n    const [exp_year, setExpYear] = useState('');\n    const [cvv, setCvv] = useState('');\n\n    const [value, setValue] = useState('');\n    const [currency, setCurrency] = useState('');\n\n    const [datas, setDatas] = useState({})\n\n    const [validated, setValidated] = useState(false);\n\n    const [isSubmit, setIsSubmit] = useState(false);\n\n    const [dataRequest, setDataRequest] = useState({});\n    const [dataReceipt, setDataReceipt] = useState({});\n\n    const [showReceipt, setShowReceipt] = useState(false);\n\n    // context api\n    const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n            //  check local storage data\n            const localReceiptData = JSON.parse(localStorage.getItem('receiptStorage'));\n            const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n\n            if (localReceiptData !== undefined && localReceiptData !== null) {\n                setIsSubmit(true);\n                setShowReceipt(true);\n                setDataReceipt(localReceiptData);\n            } else if (localData !== undefined && localData !== null) {\n                const categoryFiltered = localData.filter(category => category.id === +categoryId);\n                setProviders(categoryFiltered[0].providers);\n                const providerFiltered = providers.filter(provider => provider.id === +providerId);\n                setField(providerFiltered[0]);\n            } else {\n                history.push('/');\n            }\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }, [loading, error, isSubmit, showReceipt]);\n\n    const fieldChanged = (key, value) => {\n        setDatas(currentValues => {\n            currentValues[key] = {\n                key: key,\n                value: value\n            }\n            return currentValues;\n        });\n    }\n\n    const handleSubmit = (event) => {\n        setIsSubmit(true);\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            event.preventDefault();\n\n            const data =\n                {\n                    providerId: +providerId,\n                    fields: Object.values(datas),\n                    amount: {\n                        value: value,\n                        currency: currency\n                    },\n                    card: {\n                        number: number,\n                        exp_month: exp_month,\n                        exp_year: exp_year,\n                        cvv: cvv\n                    }\n                }\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(data)\n            };\n\n            fetch(\"http://localhost:8080/payments/new\", requestOptions)\n                .then((response) => response.json())\n                .then((res) => {\n                    console.log('data res', res)\n                    setDataReceipt(res.data);\n                    // local storage\n                    localStorage.setItem('receiptStorage', JSON.stringify(res.data));\n                    // eslint-disable-next-line no-unused-expressions\n                    dataReceipt !== undefined ? setShowReceipt(true) : setShowReceipt(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    setError(error)\n                })\n                .finally(() => setLoading(false))\n        }\n        setValidated(true);\n    };\n\n    const handleBack = () => {\n        const localData = JSON.parse(localStorage.getItem('receiptStorage'));\n\n        if (localData !== undefined || true) {\n            localStorage.removeItem('receiptStorage');\n            setIsSubmit(false);\n            setShowReceipt(false);\n        }\n\n        history.push('/');\n    }\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <Button onClick={handleBack} className=\"btn btn-light my-3\">\n                Go back\n            </Button>\n            {\n                (isSubmit && showReceipt) ? <Receipt dataReceipt={dataReceipt}/>\n                    : (\n                        <div>\n                            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                                <Row>\n                                    <Col sm={12} md={6} lg={4} xl={4}>\n                                        <div className=\"card-container\">\n                                            {field && field.fields.map((f, idx) => (\n                                                <div key={idx}>\n                                                    <Form.Group className=\"mb-2\">\n                                                        <Form.Label>{f.label}</Form.Label>\n                                                        {\n                                                            f.type === 4 ?\n                                                                (\n                                                                    <Form.Control\n                                                                        name={f.id}\n                                                                        as=\"select\"\n                                                                        required\n                                                                        onChange={(e) => fieldChanged(f.id, e.target.value)}\n                                                                    >\n                                                                        <option value=\"\">Select...</option>\n                                                                        {\n                                                                            f.options.map((option) => (\n                                                                                <option\n                                                                                    key={option.key}\n                                                                                    value={option.value}\n                                                                                >\n                                                                                    {option.value}\n                                                                                </option>\n                                                                            ))\n                                                                        }\n                                                                    </Form.Control>\n                                                                )\n                                                                : (\n                                                                    <Form.Control\n                                                                        required\n                                                                        name={f.id}\n                                                                        type={f.type === 1 ? 'text' : (f.type === 2 && f.id !== 'number') || (f.type === 3 && f.id !== 'number') ? 'number' : f.type === 5 ? 'date' : 'text'}\n                                                                        placeholder={f.label}\n                                                                        maxLength={f.id === 'number' ? 7 : 55}\n                                                                        onChange={(e) => fieldChanged(f.id, e.target.value)}\n                                                                    />\n                                                                )\n                                                        }\n                                                    </Form.Group>\n                                                </div>\n                                            ))}\n                                            <Form.Group className=\"mb-2\" controlId=\"value\">\n                                                <Form.Label>Amount</Form.Label>\n                                                <Form.Control\n                                                    type=\"text\"\n                                                    placeholder=\"Amount\"\n                                                    required\n                                                    value={value}\n                                                    onChange={(e) => setValue(e.target.value)}\n                                                />\n                                            </Form.Group>\n                                            <Form.Group className=\"mb-2\" controlId=\"currency\">\n                                                <Form.Label>Currency</Form.Label>\n                                                <Form.Control\n                                                    as=\"select\"\n                                                    required\n                                                    value={currency}\n                                                    onChange={(e) => setCurrency(e.target.value)}\n                                                >\n                                                    <option value=\"\">Select...</option>\n                                                    <option value=\"USD\">USD</option>\n                                                </Form.Control>\n                                            </Form.Group>\n                                        </div>\n                                    </Col>\n                                    <Col sm={12} md={6} lg={8} xl={5}>\n                                        <div className=\"card-container\">\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Form.Group className=\"mb-2\" controlId=\"number\">\n                                                    <Form.Label>Card number</Form.Label>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        placeholder=\"Card number\"\n                                                        required\n                                                        className=\"cardNumber\"\n                                                        value={number}\n                                                        maxLength=\"19\"\n                                                        onChange={(e) => setNumber(e.target.value)}\n                                                    />\n                                                </Form.Group>\n                                            </Col>\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Row>\n                                                    <Col sm={12} md={8} lg={6} xl={6}>\n                                                        <Form.Label>Exp date</Form.Label>\n                                                        <Form.Group className=\"exp mb-2\" controlId=\"exp_month\">\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"ExpMonth\"\n                                                                required\n                                                                className=\"exp-left\"\n                                                                value={exp_month}\n                                                                maxLength=\"2\"\n                                                                onChange={(e) => setExpMonth(e.target.value)}\n                                                            />\n                                                            <span className=\"exp-line\"/>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"ExpYear\"\n                                                                required\n                                                                className=\"exp-right\"\n                                                                value={exp_year}\n                                                                maxLength=\"2\"\n                                                                onChange={(e) => setExpYear(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col sm={12} md={8} lg={6} xl={6}>\n                                                        <Form.Group className=\"mb-2\" controlId=\"cvv\">\n                                                            <Form.Label>CVV</Form.Label>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"CVV\"\n                                                                required\n                                                                className=\"cvv\"\n                                                                value={cvv}\n                                                                maxLength=\"3\"\n                                                                onChange={(e) => setCvv(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Button className='submitButton' variant=\"primary\" type=\"submit\">\n                                                    Submit\n                                                </Button>\n                                            </Col>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        </div>\n                    )\n            }\n        </Container>\n    );\n}\n\nexport default FormScreen;\n","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/screens/ProviderScreen.jsx",["59","60","61"],"import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport {Link} from \"react-router-dom\";\nimport Provider from \"../components/Provider\";\n\n// import {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction ProviderScreen({match, history}) {\n\n    const categoryId = match.params.id;\n\n    const [categoryFiltered, setCategoryFiltered] = useState();\n    const [providers, setProviders] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // context api\n    // const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n            //  check local storage data\n            const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n            if (localData !== undefined && localData !== null) {\n                const categoryFiltered = localData.filter(category => category.id === +categoryId);\n                setCategoryFiltered(categoryFiltered[0]);\n                setProviders(categoryFiltered[0]);\n            } else {\n                history.push('/');\n            }\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }, [error, loading]);\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <h1>Providers</h1>\n            <Link to=\"/\" className=\"btn btn-light my-3\">\n                Go Back\n            </Link>\n            <div>\n                <Row>\n                    { providers && providers.providers.map((provider) => (\n                        <Col key={provider.id} sm={12} md={6} lg={4} xl={3}>\n                            <Provider categoryId={categoryId} provider={provider}/>\n                        </Col>\n                    ))}\n                </Row>\n            </div>\n        </Container>\n    );\n}\n\nexport default ProviderScreen;\n","/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/components/Category.js",[],"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/components/Receipt.js",[],"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/components/Message.js",[],"/Users/amilabdullayev/Desktop/Projects/web-payment-app/front/src/components/Provider.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":37,"nodeType":"68","messageId":"69","endLine":1,"endColumn":47},{"ruleId":"66","severity":1,"message":"70","line":12,"column":12,"nodeType":"68","messageId":"69","endLine":12,"endColumn":19},{"ruleId":"66","severity":1,"message":"71","line":12,"column":21,"nodeType":"68","messageId":"69","endLine":12,"endColumn":31},{"ruleId":"66","severity":1,"message":"72","line":33,"column":12,"nodeType":"68","messageId":"69","endLine":33,"endColumn":23},{"ruleId":"66","severity":1,"message":"73","line":33,"column":25,"nodeType":"68","messageId":"69","endLine":33,"endColumn":39},{"ruleId":"66","severity":1,"message":"74","line":39,"column":11,"nodeType":"68","messageId":"69","endLine":39,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":65,"column":8,"nodeType":"77","endLine":65,"endColumn":47,"suggestions":"78"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":37,"nodeType":"68","messageId":"69","endLine":1,"endColumn":47},{"ruleId":"66","severity":1,"message":"79","line":13,"column":12,"nodeType":"68","messageId":"69","endLine":13,"endColumn":28},{"ruleId":"75","severity":1,"message":"80","line":38,"column":8,"nodeType":"77","endLine":38,"endColumn":24,"suggestions":"81"},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'keyData' is assigned a value but never used.","'setKeyData' is assigned a value but never used.","'dataRequest' is assigned a value but never used.","'setDataRequest' is assigned a value but never used.","'categoryList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'categoryId', 'history', 'providerId', and 'providers'. Either include them or remove the dependency array.","ArrayExpression",["84"],"'categoryFiltered' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'categoryId' and 'history'. Either include them or remove the dependency array.",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [loading, error, isSubmit, showReceipt, providers, categoryId, providerId, history]",{"range":"90","text":"91"},"Update the dependencies array to be: [categoryId, error, history, loading]",{"range":"92","text":"93"},[2426,2465],"[loading, error, isSubmit, showReceipt, providers, categoryId, providerId, history]",[1363,1379],"[categoryId, error, history, loading]"]
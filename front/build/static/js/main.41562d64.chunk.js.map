{"version":3,"sources":["components/Category.js","components/Message.js","contexts/CategoryListContext.js","screens/HomeScreen.jsx","components/Provider.js","screens/ProviderScreen.jsx","assets/checked.png","components/Receipt.js","screens/FormScreen.jsx","App.js","reportWebVitals.js","index.js"],"names":["Category","category","Card","className","Body","to","id","Title","as","name","Message","variant","children","Alert","categoryList","CategoryListContext","createContext","HomeScreen","useState","categories","setCategories","loading","setLoading","error","setError","useContext","useEffect","console","Container","Row","map","Col","sm","md","lg","xl","Provider","provider","categoryId","ProviderScreen","match","history","params","setCategoryFiltered","providers","setProviders","categoryFiltered","filter","Receipt","dataReceipt","style","alignSelf","width","src","successIcon","alt","date","Object","entries","details","key","value","amount","currency","FormScreen","providerId","field","setField","number","setNumber","exp_month","setExpMonth","exp_year","setExpYear","cvv","setCvv","setValue","setCurrency","datas","setDatas","validated","setValidated","isSubmit","setIsSubmit","dataRequest","setDataRequest","setDataReceipt","showReceipt","setShowReceipt","localData","JSON","parse","localStorage","getItem","undefined","providerFiltered","fieldChanged","currentValues","Button","onClick","removeItem","push","Form","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","fields","card","randomId","length","Math","random","toString","substr","generateRandomString","date_ob","Date","getDate","slice","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","receipt","setItem","stringify","f","idx","Group","Label","label","type","Control","required","onChange","e","target","options","option","v","placeholder","maxLength","controlId","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41562d64.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nfunction Category({ category }) {\n    return (\n        <Card className=\"my-3 p-3 card-container rounded\">\n            <Card.Body>\n                <Link to={`/category/${category.id}`}>\n                    <Card.Title as=\"div\">\n                        <strong>{category.name}</strong>\n                    </Card.Title>\n                </Link>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Category;\n","import React from \"react\";\nimport { Alert } from \"react-bootstrap\";\n\nfunction Message({ variant, children }) {\n    return <Alert variant={variant}>{children}</Alert>;\n}\n\nexport default Message;\n","import {createContext} from 'react';\n\nexport const categoryList = [\n    {\n        \"id\": \"1\",\n        \"name\": \"Mobile\",\n        \"providers\": [\n            {\n                \"id\": \"1\",\n                \"name\": \"Bakcell\",\n                \"fields\": [\n                    {\n                        \"id\": \"prefix_id\",\n                        \"type\": 4,\n                        \"label\": \"Prefix\",\n                        \"options\": [\n                            {\"k\": \"1\", \"v\": \"055\"},\n                        ]\n                    },\n                    {\n                        \"id\": \"phone_number\",\n                        \"type\": 2,\n                        \"label\": \"Phone number\",\n                    }\n                ]\n            },\n            {\n                \"id\": \"2\",\n                \"name\": \"Nar\",\n                \"fields\": [\n                    {\n                        \"id\": \"prefix_id\",\n                        \"type\": 4,\n                        \"label\": \"Prefix\",\n                        \"options\": [\n                            {\"k\": \"1\", \"v\": \"055\"},\n                            {\"k\": \"2\", \"v\": \"077\"},\n                        ]\n                    }\n                ]\n            },\n            {\n                \"id\": \"3\",\n                \"name\": \"Azercell\",\n                \"fields\": [\n                    {\n                        \"id\": \"prefix_id\",\n                        \"type\": 4,\n                        \"label\": \"Prefix\",\n                        \"options\": [\n                            {\"k\": \"1\", \"v\": \"050\"},\n                            {\"k\": \"2\", \"v\": \"051\"},\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"id\": \"2\",\n        \"name\": \"Utilities\",\n        \"providers\": [\n            {\n                \"id\": \"1\",\n                \"name\": \"Azeriqaz\",\n                \"fields\": [\n                    {\n                        \"id\": \"subscriber_id\",\n                        \"type\": 1,\n                        \"label\": \"Subscriber\"\n                    }\n                ]\n            },\n            {\n                \"id\": \"2\",\n                \"name\": \"Azerisu\",\n                \"fields\": [\n                    {\n                        \"id\": \"prefix_id\",\n                        \"type\": 4,\n                        \"label\": \"Prefix\",\n                        \"options\": [\n                            {\"k\": \"1\", \"v\": \"Residential\"},\n                            {\"k\": \"2\", \"v\": \"Commercial\"},\n                        ]\n                    },\n                    {\n                        \"id\": \"subscriber_id\",\n                        \"type\": 1,\n                        \"label\": \"Subscriber\"\n                    }\n                ]\n            },\n            {\n                \"id\": \"3\",\n                \"name\": \"Grand Hayat\",\n                \"fields\": [\n                    {\n                        \"id\": \"client_code\",\n                        \"type\": 2,\n                        \"label\": \"Client code\"\n                    }\n                ]\n            }\n        ]\n    },\n    // {\n    //     \"id\": \"3\",\n    //     \"name\": \"Banks\",\n    //     \"providers\": [\n    //         {\n    //             \"id\": \"1\",\n    //             \"name\": \"Kapital Bank\",\n    //             \"fields\": [\n    //                 {}\n    //             ]\n    //         },\n    //         {\n    //             \"id\": \"1\",\n    //             \"name\": \"Pasha Bank\",\n    //             \"fields\": [\n    //                 {}\n    //             ]\n    //         },\n    //         {\n    //             \"id\": \"1\",\n    //             \"name\": \"Access Bank\",\n    //             \"fields\": [\n    //                 {}\n    //             ]\n    //         }\n    //     ]\n    // }\n]\n\nexport const CategoryListContext = createContext(categoryList);\n","import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Category from \"../components/Category\";\nimport Message from \"../components/Message\";\nimport {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction HomeScreen() {\n\n    const [categories, setCategories] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // useEffect(() => {\n    //     fetch(\"testURL\")\n    //         .then((response) => response.json())\n    //         .then((data) => {\n    //             console.info(error);\n    //             setCategories(data)\n    //         })\n    //         .catch((error) => {\n    //             console.error(error);\n    //             setError(error)\n    //         })\n    //         .finally(() => setLoading(false))\n    // }, [categories, error]);\n\n    // context api\n    const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n            setCategories(categoryList);\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n\n    }, []);\n\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <h1>Categories</h1>\n            <div>\n                <Row>\n                    {categories.map((category) => (\n                        <Col key={category.id} sm={12} md={6} lg={4} xl={3}>\n                            <Category category={category}/>\n                        </Col>\n                    ))}\n                </Row>\n            </div>\n        </Container>\n    );\n}\n\nexport default HomeScreen;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nfunction Provider({ provider, categoryId }) {\n    return (\n        <Card className=\"my-3 p-3 card-container rounded\">\n            <Card.Body>\n                <Link to={`/form/${categoryId}/${provider.id}`}>\n                    <Card.Title as=\"div\">\n                        <strong>{provider.name}</strong>\n                    </Card.Title>\n                </Link>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Provider;\n","import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport {Link} from \"react-router-dom\";\nimport Provider from \"../components/Provider\";\nimport {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction ProviderScreen({match, history}) {\n\n    const categoryId = match.params.id;\n\n    const [categoryFiltered, setCategoryFiltered] = useState();\n    const [providers, setProviders] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // context api\n    const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n            const categoryFiltered = categoryList.filter(category => category.id === categoryId);\n            setCategoryFiltered(categoryFiltered[0]);\n            setProviders(categoryFiltered[0]);\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }, []);\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <h1>Providers</h1>\n            <Link to=\"/\" className=\"btn btn-light my-3\">\n                Go Back\n            </Link>\n            <div>\n                <Row>\n                    {providers.providers.map((provider) => (\n                        <Col key={provider.id} sm={12} md={6} lg={4} xl={3}>\n                            <Provider categoryId={categoryId} provider={provider}/>\n                        </Col>\n                    ))}\n                </Row>\n            </div>\n        </Container>\n    );\n}\n\nexport default ProviderScreen;\n","export default __webpack_public_path__ + \"static/media/checked.6f298cca.png\";","import React from \"react\";\nimport {Container, Card} from \"react-bootstrap\";\nimport successIcon from '../assets/checked.png';\n\nfunction Receipt({dataReceipt}) {\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Card className=\"my-3 p-3 card-container rounded\">\n                <img style={{alignSelf: 'center'}} width=\"85\" src={successIcon} alt=\"Logo\"/>\n                {dataReceipt && (\n                    <Card.Body>\n                        <Card.Title as=\"div\">\n                            <span className=\"text-success\">Payment id: </span> <strong>{dataReceipt.id}</strong>\n                        </Card.Title>\n                        <Card.Title as=\"div\">\n                            <span className=\"text-success\">Transaction date: </span> <strong>{dataReceipt.date}</strong>\n                        </Card.Title>\n                        <Card.Title as=\"div\">\n                            <span className=\"text-success\">Transaction details: </span>\n                            {\n                                Object.entries(dataReceipt.details).map(([key, value]) => (\n                                    <>\n                                        <strong>{key}: {value},</strong> <br/>\n                                    </>\n                                ))\n                            }\n                        </Card.Title>\n                        <Card.Title as=\"div\">\n                            <span className=\"text-success\">Amount paid: </span>\n                            <strong>{`${dataReceipt.amount.value} ${dataReceipt.amount.currency}`}</strong>\n                        </Card.Title>\n                    </Card.Body>\n                )}\n            </Card>\n        </Container>\n    );\n}\n\nexport default Receipt;\n","import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Form, Row, Button} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport Receipt from \"../components/Receipt\";\nimport {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction FormScreen({match, history}) {\n\n    const categoryId = match.params.categoryId;\n    const providerId = match.params.providerId;\n\n    const [field, setField] = useState();\n    const [providers, setProviders] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // form\n    const [number, setNumber] = useState('');\n    const [exp_month, setExpMonth] = useState('');\n    const [exp_year, setExpYear] = useState('');\n    const [cvv, setCvv] = useState('');\n\n    const [value, setValue] = useState('');\n    const [currency, setCurrency] = useState('');\n\n    const [datas, setDatas] = useState({})\n\n    const [validated, setValidated] = useState(false);\n\n    const [isSubmit, setIsSubmit] = useState(false);\n\n    const [dataRequest, setDataRequest] = useState({});\n    const [dataReceipt, setDataReceipt] = useState({});\n\n    const [showReceipt, setShowReceipt] = useState(false);\n\n    // context api\n    const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n            //  check local storage data\n            const localData = JSON.parse(localStorage.getItem('receiptStorage'));\n            \n            if (localData !== undefined && localData !== null) {\n                setIsSubmit(true);\n                setShowReceipt(true);\n                setDataReceipt(localData);\n            }\n\n            const categoryFiltered = categoryList.filter(category => category.id === categoryId);\n            const providerFiltered = providers.filter(provider => provider.id === providerId);\n\n            setProviders(categoryFiltered[0].providers);\n            setField(providerFiltered[0]);\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }, [loading, error, isSubmit, showReceipt]);\n\n    const fieldChanged = (key, value) => {\n        setDatas(currentValues => {\n            currentValues[key] = value;\n            return currentValues;\n        });\n\n        // for (const [key, value] of Object.entries(datas)) {\n        //     setKeyData(currentValues => {\n        //         currentValues = {\n        //             k: currentValues[key],\n        //             v: value\n        //         }\n        //         return currentValues;\n        //     });\n        // }\n\n        // console.info('keyData', keyData);\n    }\n\n    const handleSubmit = (event) => {\n        setIsSubmit(true);\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            event.preventDefault();\n\n            const data = [\n                {\n                    providerId: providerId,\n                    fields: datas,\n                    amount: {\n                        value: value,\n                        currency: currency\n                    },\n                    card: {\n                        number: number,\n                        exp_month: exp_month,\n                        exp_year: exp_year,\n                        cvv: cvv\n                    }\n                }\n            ]\n\n            setDataRequest(data);\n\n            // for generate id\n            const generateRandomString = (length = 10) => Math.random().toString(20).substr(2, length)\n            let randomId = generateRandomString(200);\n\n            // yyyy-MM-ddTHH:mm:ss\n            let date_ob = new Date();\n            // adjust 0 before single digit date\n            let date = (\"0\" + date_ob.getDate()).slice(-2);\n            // current month\n            let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\n            // current year\n            let year = date_ob.getFullYear();\n            // current hours\n            let hours = date_ob.getHours();\n            // current minutes\n            let minutes = date_ob.getMinutes();\n            // current seconds\n            let seconds = date_ob.getSeconds();\n\n            const dateNow = `${year}-${month}-${date}T${hours}:${minutes}:${seconds}`;\n\n            const receipt = {\n                id: randomId,\n                date: dateNow,\n                details: datas,\n                amount: {\n                    value: value,\n                    currency: currency\n                }\n            }\n\n            setDataReceipt(receipt);\n\n            // local storage\n            localStorage.setItem('receiptStorage', JSON.stringify(receipt));\n\n            // eslint-disable-next-line no-unused-expressions\n            dataReceipt !== undefined && dataRequest !== undefined ? setShowReceipt(true) : setShowReceipt(false);\n\n        }\n        setValidated(true);\n    };\n\n    const handleBack = () => {\n        const localeData = JSON.parse(localStorage.getItem('receiptStorage'));\n\n        if (localeData !== undefined || true) {\n            localStorage.removeItem('receiptStorage');\n            setIsSubmit(false);\n            setShowReceipt(false);\n        }\n\n        history.push('/');\n    }\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <Button onClick={handleBack} className=\"btn btn-light my-3\">\n                Go back\n            </Button>\n            {\n                (isSubmit && showReceipt) ? <Receipt dataReceipt={dataReceipt}/>\n                    : (\n                        <div>\n                            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                                <Row>\n                                    <Col sm={12} md={6} lg={4} xl={4}>\n                                        <div className=\"card-container\">\n                                            {field && field.fields.map((f, idx) => (\n                                                <div key={idx}>\n                                                    <Form.Group className=\"mb-2\">\n                                                        <Form.Label>{f.label}</Form.Label>\n                                                        {\n                                                            f.type === 4 ?\n                                                                (\n                                                                    <Form.Control\n                                                                        name={f.id}\n                                                                        as=\"select\"\n                                                                        required\n                                                                        onChange={(e) => fieldChanged(f.id, e.target.value)}\n                                                                    >\n                                                                        <option value=\"\">Select...</option>\n                                                                        {\n                                                                            f.options.map((option) => (\n                                                                                <option\n                                                                                    key={option.id}\n                                                                                    value={option.v}\n                                                                                >\n                                                                                    {option.v}\n                                                                                </option>\n                                                                            ))\n                                                                        }\n                                                                    </Form.Control>\n                                                                )\n                                                                : (\n                                                                    <Form.Control\n                                                                        required\n                                                                        name={f.id}\n                                                                        type={f.type === 1 ? 'text' : (f.type === 2 && f.id !== 'phone_number') || (f.type === 3 && f.id !== 'phone_number') ? 'number' : f.type === 5 ? 'date' : 'text'}\n                                                                        placeholder={f.label}\n                                                                        maxLength={f.id === 'phone_number' ? 7 : 55}\n                                                                        onChange={(e) => fieldChanged(f.id, e.target.value)}\n                                                                    />\n                                                                )\n                                                        }\n                                                    </Form.Group>\n                                                </div>\n                                            ))}\n                                            <Form.Group className=\"mb-2\" controlId=\"value\">\n                                                <Form.Label>Amount</Form.Label>\n                                                <Form.Control\n                                                    type=\"text\"\n                                                    placeholder=\"Amount\"\n                                                    required\n                                                    value={value}\n                                                    onChange={(e) => setValue(e.target.value)}\n                                                />\n                                            </Form.Group>\n                                            <Form.Group className=\"mb-2\" controlId=\"currency\">\n                                                <Form.Label>Currency</Form.Label>\n                                                <Form.Control\n                                                    as=\"select\"\n                                                    required\n                                                    value={currency}\n                                                    onChange={(e) => setCurrency(e.target.value)}\n                                                >\n                                                    <option value=\"\">Select...</option>\n                                                    <option value=\"USD\">USD</option>\n                                                </Form.Control>\n                                            </Form.Group>\n                                        </div>\n                                    </Col>\n                                    <Col sm={12} md={6} lg={8} xl={5}>\n                                        <div className=\"card-container\">\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Form.Group className=\"mb-2\" controlId=\"number\">\n                                                    <Form.Label>Card number</Form.Label>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        placeholder=\"Card number\"\n                                                        required\n                                                        className=\"cardNumber\"\n                                                        value={number}\n                                                        maxLength=\"19\"\n                                                        onChange={(e) => setNumber(e.target.value)}\n                                                    />\n                                                </Form.Group>\n                                            </Col>\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Row>\n                                                    <Col sm={12} md={8} lg={6} xl={6}>\n                                                        <Form.Label>Exp date</Form.Label>\n                                                        <Form.Group className=\"exp mb-2\" controlId=\"exp_month\">\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"ExpMonth\"\n                                                                required\n                                                                className=\"exp-left\"\n                                                                value={exp_month}\n                                                                maxLength=\"2\"\n                                                                onChange={(e) => setExpMonth(e.target.value)}\n                                                            />\n                                                            <span className=\"exp-line\"/>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"ExpYear\"\n                                                                required\n                                                                className=\"exp-right\"\n                                                                value={exp_year}\n                                                                maxLength=\"2\"\n                                                                onChange={(e) => setExpYear(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col sm={12} md={8} lg={6} xl={6}>\n                                                        <Form.Group className=\"mb-2\" controlId=\"cvv\">\n                                                            <Form.Label>CVV</Form.Label>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"CVV\"\n                                                                required\n                                                                className=\"cvv\"\n                                                                value={cvv}\n                                                                maxLength=\"3\"\n                                                                onChange={(e) => setCvv(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Button className='submitButton' variant=\"primary\" type=\"submit\">\n                                                    Submit\n                                                </Button>\n                                            </Col>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        </div>\n                    )\n            }\n        </Container>\n    );\n}\n\nexport default FormScreen;\n","import './styles/global.css';\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport ProviderScreen from \"./screens/ProviderScreen\";\nimport FormScreen from \"./screens/FormScreen\";\n\nimport {categoryList, CategoryListContext} from \"./contexts/CategoryListContext\";\n\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <CategoryListContext.Provider value={categoryList}>\n                    <Route path=\"/\" component={HomeScreen} exact/>\n                    <Route path=\"/category/:id\" component={ProviderScreen}/>\n                    <Route path=\"/form/:categoryId/:providerId\" component={FormScreen}/>\n                </CategoryListContext.Provider>\n            </div>\n        </Router>\n    )\n        ;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
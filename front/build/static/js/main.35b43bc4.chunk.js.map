{"version":3,"sources":["components/Category.js","components/Message.js","screens/HomeScreen.jsx","components/Provider.js","screens/ProviderScreen.jsx","assets/checked.png","components/Receipt.js","contexts/CategoryListContext.js","screens/FormScreen.jsx","App.js","reportWebVitals.js","index.js"],"names":["Category","category","Card","className","Body","to","id","Title","as","name","Message","variant","children","Alert","HomeScreen","useState","categories","setCategories","loading","setLoading","error","setError","useEffect","fetch","then","response","json","data","localData","JSON","parse","localStorage","getItem","undefined","setItem","stringify","catch","console","finally","Container","Row","map","Col","sm","md","lg","xl","Provider","provider","categoryId","ProviderScreen","match","history","params","setCategoryFiltered","providers","setProviders","categoryFiltered","filter","push","Receipt","dataReceipt","style","alignSelf","width","src","successIcon","alt","date","details","detail","key","value","amount","currency","categoryList","CategoryListContext","createContext","FormScreen","providerId","field","setField","number","setNumber","exp_month","setExpMonth","exp_year","setExpYear","cvv","setCvv","setValue","setCurrency","datas","setDatas","validated","setValidated","isSubmit","setIsSubmit","setDataReceipt","showReceipt","setShowReceipt","useContext","localReceiptData","providerFiltered","fieldChanged","currentValues","Button","onClick","removeItem","Form","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","fields","Object","values","card","requestOptions","method","headers","body","res","log","f","idx","Group","Label","label","type","Control","required","onChange","e","target","options","option","placeholder","maxLength","controlId","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35b43bc4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nfunction Category({ category }) {\n    return (\n        <Card className=\"my-3 p-3 card-container rounded\">\n            <Card.Body>\n                <Link to={`/category/${category.id}`}>\n                    <Card.Title as=\"div\">\n                        <strong>{category.name}</strong>\n                    </Card.Title>\n                </Link>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Category;\n","import React from \"react\";\nimport { Alert } from \"react-bootstrap\";\n\nfunction Message({ variant, children }) {\n    return <Alert variant={variant}>{children}</Alert>;\n}\n\nexport default Message;\n","import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Category from \"../components/Category\";\nimport Message from \"../components/Message\";\n// import {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction HomeScreen() {\n\n    const [categories, setCategories] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // context api\n    // const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        fetch(\"http://localhost:8080/payments/categories\")\n            .then((response) => response.json())\n            .then((data) => {\n                //  check local storage data\n                const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n                if (localData !== undefined && localData !== null) {\n                    localStorage.setItem('categoryListStorage', JSON.stringify(data));\n                    setCategories(localData)\n                }\n\n                // local storage\n                localStorage.setItem('categoryListStorage', JSON.stringify(data));\n                setCategories(data)\n            })\n            .catch((error) => {\n                console.error(error);\n                setError(error)\n            })\n            .finally(() => setLoading(false))\n    }, [loading, error]);\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <h1>Categories</h1>\n            <div>\n                <Row>\n                    {categories.map((category) => (\n                        <Col key={category.id} sm={12} md={6} lg={4} xl={3}>\n                            <Category category={category}/>\n                        </Col>\n                    ))}\n                </Row>\n            </div>\n        </Container>\n    );\n}\n\nexport default HomeScreen;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nfunction Provider({ provider, categoryId }) {\n    return (\n        <Card className=\"my-3 p-3 card-container rounded\">\n            <Card.Body>\n                <Link to={`/form/${categoryId}/${provider.id}`}>\n                    <Card.Title as=\"div\">\n                        <strong>{provider.name}</strong>\n                    </Card.Title>\n                </Link>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default Provider;\n","import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport {Link} from \"react-router-dom\";\nimport Provider from \"../components/Provider\";\n\n// import {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction ProviderScreen({match, history}) {\n\n    const categoryId = match.params.id;\n\n    const [categoryFiltered, setCategoryFiltered] = useState();\n    const [providers, setProviders] = useState();\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // context api\n    // const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n            //  check local storage data\n            const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n            if (localData !== undefined && localData !== null) {\n                const categoryFiltered = localData.filter(category => category.id === +categoryId);\n                setCategoryFiltered(categoryFiltered[0]);\n                setProviders(categoryFiltered[0]);\n            } else {\n                history.push('/');\n            }\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }, [error, loading]);\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <h1>Providers</h1>\n            <Link to=\"/\" className=\"btn btn-light my-3\">\n                Go Back\n            </Link>\n            <div>\n                <Row>\n                    { providers && providers.providers.map((provider) => (\n                        <Col key={provider.id} sm={12} md={6} lg={4} xl={3}>\n                            <Provider categoryId={categoryId} provider={provider}/>\n                        </Col>\n                    ))}\n                </Row>\n            </div>\n        </Container>\n    );\n}\n\nexport default ProviderScreen;\n","export default __webpack_public_path__ + \"static/media/checked.6f298cca.png\";","import React from \"react\";\nimport {Container, Card} from \"react-bootstrap\";\nimport successIcon from '../assets/checked.png';\n\nfunction Receipt({dataReceipt}) {\n\n    return (\n        <Container className=\"d-flex justify-content-center\">\n            <Card className=\"my-3 p-3 card-container rounded\">\n                <img style={{alignSelf: 'center'}} width=\"85\" src={successIcon} alt=\"Logo\"/>\n                {dataReceipt && (\n                    <Card.Body>\n                        <Card.Title as=\"div\">\n                            <span className=\"text-success\">Payment id: </span> <strong>{dataReceipt.id}</strong>\n                        </Card.Title>\n                        <Card.Title as=\"div\">\n                            <span className=\"text-success\">Transaction date: </span> <strong>{dataReceipt.date}</strong>\n                        </Card.Title>\n                        <Card.Title as=\"div\">\n                            <span className=\"text-success\">Transaction details: </span>\n                            {\n                                dataReceipt.details.map((detail) => (\n                                    <>\n                                        <strong>{detail.key}: {detail.value}</strong> <br/>\n                                    </>\n                                ))\n                            }\n                        </Card.Title>\n                        <Card.Title as=\"div\">\n                            <span className=\"text-success\">Amount paid: </span>\n                            <strong>{`${dataReceipt.amount.value} ${dataReceipt.amount.currency}`}</strong>\n                        </Card.Title>\n                    </Card.Body>\n                )}\n            </Card>\n        </Container>\n    );\n}\n\nexport default Receipt;\n","import {createContext} from 'react';\n\nconst categoryList = [{}]\n\nexport const CategoryListContext = createContext(categoryList);\n","import React, {useState, useEffect, useContext} from \"react\";\nimport {Col, Container, Form, Row, Button} from \"react-bootstrap\";\nimport Message from \"../components/Message\";\nimport Receipt from \"../components/Receipt\";\nimport {CategoryListContext} from \"../contexts/CategoryListContext\";\n\nfunction FormScreen({match, history}) {\n\n    const categoryId = match.params.categoryId;\n    const providerId = match.params.providerId;\n\n    const [keyData, setKeyData] = useState();\n    const [field, setField] = useState();\n    const [providers, setProviders] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // form\n    const [number, setNumber] = useState('');\n    const [exp_month, setExpMonth] = useState('');\n    const [exp_year, setExpYear] = useState('');\n    const [cvv, setCvv] = useState('');\n\n    const [value, setValue] = useState('');\n    const [currency, setCurrency] = useState('');\n\n    const [datas, setDatas] = useState({})\n\n    const [validated, setValidated] = useState(false);\n\n    const [isSubmit, setIsSubmit] = useState(false);\n\n    const [dataRequest, setDataRequest] = useState({});\n    const [dataReceipt, setDataReceipt] = useState({});\n\n    const [showReceipt, setShowReceipt] = useState(false);\n\n    // context api\n    const categoryList = useContext(CategoryListContext);\n\n    useEffect(() => {\n        try {\n            //  check local storage data\n            const localReceiptData = JSON.parse(localStorage.getItem('receiptStorage'));\n            const localData = JSON.parse(localStorage.getItem('categoryListStorage'));\n\n            if (localReceiptData !== undefined && localReceiptData !== null) {\n                setIsSubmit(true);\n                setShowReceipt(true);\n                setDataReceipt(localReceiptData);\n            } else if (localData !== undefined && localData !== null) {\n                const categoryFiltered = localData.filter(category => category.id === +categoryId);\n                setProviders(categoryFiltered[0].providers);\n                const providerFiltered = providers.filter(provider => provider.id === +providerId);\n                setField(providerFiltered[0]);\n            } else {\n                history.push('/');\n            }\n        } catch (error) {\n            console.error(error);\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }, [loading, error, isSubmit, showReceipt]);\n\n    const fieldChanged = (key, value) => {\n        setDatas(currentValues => {\n            currentValues[key] = {\n                key: key,\n                value: value\n            }\n            return currentValues;\n        });\n    }\n\n    const handleSubmit = (event) => {\n        setIsSubmit(true);\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            event.preventDefault();\n\n            const data =\n                {\n                    providerId: +providerId,\n                    fields: Object.values(datas),\n                    amount: {\n                        value: value,\n                        currency: currency\n                    },\n                    card: {\n                        number: number,\n                        exp_month: exp_month,\n                        exp_year: exp_year,\n                        cvv: cvv\n                    }\n                }\n\n            const requestOptions = {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(data)\n            };\n\n            fetch(\"http://localhost:8080/payments/new\", requestOptions)\n                .then((response) => response.json())\n                .then((res) => {\n                    console.log('data res', res)\n                    setDataReceipt(res.data);\n                    // local storage\n                    localStorage.setItem('receiptStorage', JSON.stringify(res.data));\n                    // eslint-disable-next-line no-unused-expressions\n                    dataReceipt !== undefined ? setShowReceipt(true) : setShowReceipt(false);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    setError(error)\n                })\n                .finally(() => setLoading(false))\n        }\n        setValidated(true);\n    };\n\n    const handleBack = () => {\n        const localData = JSON.parse(localStorage.getItem('receiptStorage'));\n\n        if (localData !== undefined || true) {\n            localStorage.removeItem('receiptStorage');\n            setIsSubmit(false);\n            setShowReceipt(false);\n        }\n\n        history.push('/');\n    }\n\n    if (loading) return \"Loading...\";\n    if (error) return <Message variant=\"danger\">{error}</Message>\n\n    return (\n        <Container>\n            <Button onClick={handleBack} className=\"btn btn-light my-3\">\n                Go back\n            </Button>\n            {\n                (isSubmit && showReceipt) ? <Receipt dataReceipt={dataReceipt}/>\n                    : (\n                        <div>\n                            <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                                <Row>\n                                    <Col sm={12} md={6} lg={4} xl={4}>\n                                        <div className=\"card-container\">\n                                            {field && field.fields.map((f, idx) => (\n                                                <div key={idx}>\n                                                    <Form.Group className=\"mb-2\">\n                                                        <Form.Label>{f.label}</Form.Label>\n                                                        {\n                                                            f.type === 4 ?\n                                                                (\n                                                                    <Form.Control\n                                                                        name={f.id}\n                                                                        as=\"select\"\n                                                                        required\n                                                                        onChange={(e) => fieldChanged(f.id, e.target.value)}\n                                                                    >\n                                                                        <option value=\"\">Select...</option>\n                                                                        {\n                                                                            f.options.map((option) => (\n                                                                                <option\n                                                                                    key={option.key}\n                                                                                    value={option.value}\n                                                                                >\n                                                                                    {option.value}\n                                                                                </option>\n                                                                            ))\n                                                                        }\n                                                                    </Form.Control>\n                                                                )\n                                                                : (\n                                                                    <Form.Control\n                                                                        required\n                                                                        name={f.id}\n                                                                        type={f.type === 1 ? 'text' : (f.type === 2 && f.id !== 'number') || (f.type === 3 && f.id !== 'number') ? 'number' : f.type === 5 ? 'date' : 'text'}\n                                                                        placeholder={f.label}\n                                                                        maxLength={f.id === 'number' ? 7 : 55}\n                                                                        onChange={(e) => fieldChanged(f.id, e.target.value)}\n                                                                    />\n                                                                )\n                                                        }\n                                                    </Form.Group>\n                                                </div>\n                                            ))}\n                                            <Form.Group className=\"mb-2\" controlId=\"value\">\n                                                <Form.Label>Amount</Form.Label>\n                                                <Form.Control\n                                                    type=\"text\"\n                                                    placeholder=\"Amount\"\n                                                    required\n                                                    value={value}\n                                                    onChange={(e) => setValue(e.target.value)}\n                                                />\n                                            </Form.Group>\n                                            <Form.Group className=\"mb-2\" controlId=\"currency\">\n                                                <Form.Label>Currency</Form.Label>\n                                                <Form.Control\n                                                    as=\"select\"\n                                                    required\n                                                    value={currency}\n                                                    onChange={(e) => setCurrency(e.target.value)}\n                                                >\n                                                    <option value=\"\">Select...</option>\n                                                    <option value=\"USD\">USD</option>\n                                                </Form.Control>\n                                            </Form.Group>\n                                        </div>\n                                    </Col>\n                                    <Col sm={12} md={6} lg={8} xl={5}>\n                                        <div className=\"card-container\">\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Form.Group className=\"mb-2\" controlId=\"number\">\n                                                    <Form.Label>Card number</Form.Label>\n                                                    <Form.Control\n                                                        type=\"text\"\n                                                        placeholder=\"Card number\"\n                                                        required\n                                                        className=\"cardNumber\"\n                                                        value={number}\n                                                        maxLength=\"19\"\n                                                        onChange={(e) => setNumber(e.target.value)}\n                                                    />\n                                                </Form.Group>\n                                            </Col>\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Row>\n                                                    <Col sm={12} md={8} lg={6} xl={6}>\n                                                        <Form.Label>Exp date</Form.Label>\n                                                        <Form.Group className=\"exp mb-2\" controlId=\"exp_month\">\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"ExpMonth\"\n                                                                required\n                                                                className=\"exp-left\"\n                                                                value={exp_month}\n                                                                maxLength=\"2\"\n                                                                onChange={(e) => setExpMonth(e.target.value)}\n                                                            />\n                                                            <span className=\"exp-line\"/>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"ExpYear\"\n                                                                required\n                                                                className=\"exp-right\"\n                                                                value={exp_year}\n                                                                maxLength=\"2\"\n                                                                onChange={(e) => setExpYear(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n                                                    </Col>\n                                                    <Col sm={12} md={8} lg={6} xl={6}>\n                                                        <Form.Group className=\"mb-2\" controlId=\"cvv\">\n                                                            <Form.Label>CVV</Form.Label>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"CVV\"\n                                                                required\n                                                                className=\"cvv\"\n                                                                value={cvv}\n                                                                maxLength=\"3\"\n                                                                onChange={(e) => setCvv(e.target.value)}\n                                                            />\n                                                        </Form.Group>\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                            <Col sm={12} md={12} lg={12} xl={12}>\n                                                <Button className='submitButton' variant=\"primary\" type=\"submit\">\n                                                    Submit\n                                                </Button>\n                                            </Col>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        </div>\n                    )\n            }\n        </Container>\n    );\n}\n\nexport default FormScreen;\n","import './styles/global.css';\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport ProviderScreen from \"./screens/ProviderScreen\";\nimport FormScreen from \"./screens/FormScreen\";\n\n// import {CategoryListContext} from \"./contexts/CategoryListContext\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                {/*<CategoryListContext.Provider value={categoryList}>*/}\n                    <Route path=\"/\" component={HomeScreen} exact/>\n                    <Route path=\"/category/:id\" component={ProviderScreen}/>\n                    <Route path=\"/form/:categoryId/:providerId\" component={FormScreen}/>\n                {/*</CategoryListContext.Provider>*/}\n            </div>\n        </Router>\n    )\n        ;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}